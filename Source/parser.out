Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> port
Rule 1     port -> Inicio code Fim
Rule 2     port -> fun Inicio code Fim
Rule 3     code -> com
Rule 4     code -> code com
Rule 5     fun -> funcao varType varName ( vars ) : code fim_funcao
Rule 6     fun -> funcao void varName ( vars ) : code fim_funcao
Rule 7     vars -> <empty>
Rule 8     vars -> varType varName
Rule 9     vars -> vars , varType varName
Rule 10    com -> lines
Rule 11    com -> cond
Rule 12    com -> cycle
Rule 13    lines -> varName assign value ;
Rule 14    lines -> varType : varName_list ;
Rule 15    lines -> escreva value_list ;
Rule 16    lines -> leia value_list ;
Rule 17    lines -> retorna value ;
Rule 18    cond -> se value entao code fim_se
Rule 19    cond -> se value entao code senao code fim_se
Rule 20    cycle -> para varName de value ate value passo value faca code fim_para
Rule 21    cycle -> enquanto value_list faca code fim_enquanto
Rule 22    value -> varName
Rule 23    value -> bool
Rule 24    value -> calc
Rule 25    value -> string
Rule 26    value -> varName ( value_list )
Rule 27    value -> varName ( )
Rule 28    varType -> inteiro
Rule 29    varType -> real
Rule 30    varType -> carater
Rule 31    varType -> logico
Rule 32    varName_list -> varName
Rule 33    varName_list -> varName_list , varName
Rule 34    value_list -> value
Rule 35    value_list -> value_list , value
Rule 36    value_list -> ( value_list )
Rule 37    bool -> opt
Rule 38    bool -> value e value
Rule 39    bool -> value ou value
Rule 40    bool -> value xou value
Rule 41    calc -> int
Rule 42    calc -> float
Rule 43    calc -> - value
Rule 44    calc -> value + value
Rule 45    calc -> value - value
Rule 46    calc -> value * value
Rule 47    calc -> value / value
Rule 48    calc -> value < value
Rule 49    calc -> value > value
Rule 50    calc -> value dif value
Rule 51    calc -> value eq value
Rule 52    calc -> value maieq value
Rule 53    calc -> value meneq value
Rule 54    opt -> verdadeiro
Rule 55    opt -> falso
Rule 56    opt -> nao opt

Terminals, with rules where they appear

(                    : 5 6 26 27 36
)                    : 5 6 26 27 36
*                    : 46
+                    : 44
,                    : 9 33 35
-                    : 43 45
/                    : 47
:                    : 5 6 14
;                    : 13 14 15 16 17
<                    : 48
>                    : 49
Fim                  : 1 2
Inicio               : 1 2
assign               : 13
ate                  : 20
carater              : 30
de                   : 20
dif                  : 50
e                    : 38
enquanto             : 21
entao                : 18 19
eq                   : 51
error                : 
escreva              : 15
faca                 : 20 21
falso                : 55
fim_enquanto         : 21
fim_funcao           : 5 6
fim_para             : 20
fim_se               : 18 19
float                : 42
funcao               : 5 6
int                  : 41
inteiro              : 28
leia                 : 16
logico               : 31
maieq                : 52
meneq                : 53
nao                  : 56
ou                   : 39
para                 : 20
passo                : 20
real                 : 29
retorna              : 17
se                   : 18 19
senao                : 19
string               : 25
varName              : 5 6 8 9 13 20 22 26 27 32 33
verdadeiro           : 54
void                 : 6
xou                  : 40

Nonterminals, with rules where they appear

bool                 : 23
calc                 : 24
code                 : 1 2 4 5 6 18 19 19 20 21
com                  : 3 4
cond                 : 11
cycle                : 12
fun                  : 2
lines                : 10
opt                  : 37 56
port                 : 0
value                : 13 17 18 19 20 20 20 34 35 38 38 39 39 40 40 43 44 44 45 45 46 46 47 47 48 48 49 49 50 50 51 51 52 52 53 53
value_list           : 15 16 21 26 35 36
varName_list         : 14 33
varType              : 5 8 9 14
vars                 : 5 6 9

Parsing method: LALR

state 0

    (0) S' -> . port
    (1) port -> . Inicio code Fim
    (2) port -> . fun Inicio code Fim
    (5) fun -> . funcao varType varName ( vars ) : code fim_funcao
    (6) fun -> . funcao void varName ( vars ) : code fim_funcao

    Inicio          shift and go to state 2
    funcao          shift and go to state 4

    port                           shift and go to state 1
    fun                            shift and go to state 3

state 1

    (0) S' -> port .



state 2

    (1) port -> Inicio . code Fim
    (3) code -> . com
    (4) code -> . code com
    (10) com -> . lines
    (11) com -> . cond
    (12) com -> . cycle
    (13) lines -> . varName assign value ;
    (14) lines -> . varType : varName_list ;
    (15) lines -> . escreva value_list ;
    (16) lines -> . leia value_list ;
    (17) lines -> . retorna value ;
    (18) cond -> . se value entao code fim_se
    (19) cond -> . se value entao code senao code fim_se
    (20) cycle -> . para varName de value ate value passo value faca code fim_para
    (21) cycle -> . enquanto value_list faca code fim_enquanto
    (28) varType -> . inteiro
    (29) varType -> . real
    (30) varType -> . carater
    (31) varType -> . logico

    varName         shift and go to state 10
    escreva         shift and go to state 12
    leia            shift and go to state 13
    retorna         shift and go to state 14
    se              shift and go to state 15
    para            shift and go to state 16
    enquanto        shift and go to state 17
    inteiro         shift and go to state 18
    real            shift and go to state 19
    carater         shift and go to state 20
    logico          shift and go to state 21

    code                           shift and go to state 5
    com                            shift and go to state 6
    lines                          shift and go to state 7
    cond                           shift and go to state 8
    cycle                          shift and go to state 9
    varType                        shift and go to state 11

state 3

    (2) port -> fun . Inicio code Fim

    Inicio          shift and go to state 22


state 4

    (5) fun -> funcao . varType varName ( vars ) : code fim_funcao
    (6) fun -> funcao . void varName ( vars ) : code fim_funcao
    (28) varType -> . inteiro
    (29) varType -> . real
    (30) varType -> . carater
    (31) varType -> . logico

    void            shift and go to state 24
    inteiro         shift and go to state 18
    real            shift and go to state 19
    carater         shift and go to state 20
    logico          shift and go to state 21

    varType                        shift and go to state 23

state 5

    (1) port -> Inicio code . Fim
    (4) code -> code . com
    (10) com -> . lines
    (11) com -> . cond
    (12) com -> . cycle
    (13) lines -> . varName assign value ;
    (14) lines -> . varType : varName_list ;
    (15) lines -> . escreva value_list ;
    (16) lines -> . leia value_list ;
    (17) lines -> . retorna value ;
    (18) cond -> . se value entao code fim_se
    (19) cond -> . se value entao code senao code fim_se
    (20) cycle -> . para varName de value ate value passo value faca code fim_para
    (21) cycle -> . enquanto value_list faca code fim_enquanto
    (28) varType -> . inteiro
    (29) varType -> . real
    (30) varType -> . carater
    (31) varType -> . logico

    Fim             shift and go to state 25
    varName         shift and go to state 10
    escreva         shift and go to state 12
    leia            shift and go to state 13
    retorna         shift and go to state 14
    se              shift and go to state 15
    para            shift and go to state 16
    enquanto        shift and go to state 17
    inteiro         shift and go to state 18
    real            shift and go to state 19
    carater         shift and go to state 20
    logico          shift and go to state 21

    com                            shift and go to state 26
    lines                          shift and go to state 7
    cond                           shift and go to state 8
    cycle                          shift and go to state 9
    varType                        shift and go to state 11

state 6

    (3) code -> com .

    Fim             reduce using rule 3 (code -> com .)
    varName         reduce using rule 3 (code -> com .)
    escreva         reduce using rule 3 (code -> com .)
    leia            reduce using rule 3 (code -> com .)
    retorna         reduce using rule 3 (code -> com .)
    se              reduce using rule 3 (code -> com .)
    para            reduce using rule 3 (code -> com .)
    enquanto        reduce using rule 3 (code -> com .)
    inteiro         reduce using rule 3 (code -> com .)
    real            reduce using rule 3 (code -> com .)
    carater         reduce using rule 3 (code -> com .)
    logico          reduce using rule 3 (code -> com .)
    fim_se          reduce using rule 3 (code -> com .)
    senao           reduce using rule 3 (code -> com .)
    fim_enquanto    reduce using rule 3 (code -> com .)
    fim_funcao      reduce using rule 3 (code -> com .)
    fim_para        reduce using rule 3 (code -> com .)


state 7

    (10) com -> lines .

    Fim             reduce using rule 10 (com -> lines .)
    varName         reduce using rule 10 (com -> lines .)
    escreva         reduce using rule 10 (com -> lines .)
    leia            reduce using rule 10 (com -> lines .)
    retorna         reduce using rule 10 (com -> lines .)
    se              reduce using rule 10 (com -> lines .)
    para            reduce using rule 10 (com -> lines .)
    enquanto        reduce using rule 10 (com -> lines .)
    inteiro         reduce using rule 10 (com -> lines .)
    real            reduce using rule 10 (com -> lines .)
    carater         reduce using rule 10 (com -> lines .)
    logico          reduce using rule 10 (com -> lines .)
    fim_se          reduce using rule 10 (com -> lines .)
    senao           reduce using rule 10 (com -> lines .)
    fim_enquanto    reduce using rule 10 (com -> lines .)
    fim_funcao      reduce using rule 10 (com -> lines .)
    fim_para        reduce using rule 10 (com -> lines .)


state 8

    (11) com -> cond .

    Fim             reduce using rule 11 (com -> cond .)
    varName         reduce using rule 11 (com -> cond .)
    escreva         reduce using rule 11 (com -> cond .)
    leia            reduce using rule 11 (com -> cond .)
    retorna         reduce using rule 11 (com -> cond .)
    se              reduce using rule 11 (com -> cond .)
    para            reduce using rule 11 (com -> cond .)
    enquanto        reduce using rule 11 (com -> cond .)
    inteiro         reduce using rule 11 (com -> cond .)
    real            reduce using rule 11 (com -> cond .)
    carater         reduce using rule 11 (com -> cond .)
    logico          reduce using rule 11 (com -> cond .)
    fim_se          reduce using rule 11 (com -> cond .)
    senao           reduce using rule 11 (com -> cond .)
    fim_enquanto    reduce using rule 11 (com -> cond .)
    fim_funcao      reduce using rule 11 (com -> cond .)
    fim_para        reduce using rule 11 (com -> cond .)


state 9

    (12) com -> cycle .

    Fim             reduce using rule 12 (com -> cycle .)
    varName         reduce using rule 12 (com -> cycle .)
    escreva         reduce using rule 12 (com -> cycle .)
    leia            reduce using rule 12 (com -> cycle .)
    retorna         reduce using rule 12 (com -> cycle .)
    se              reduce using rule 12 (com -> cycle .)
    para            reduce using rule 12 (com -> cycle .)
    enquanto        reduce using rule 12 (com -> cycle .)
    inteiro         reduce using rule 12 (com -> cycle .)
    real            reduce using rule 12 (com -> cycle .)
    carater         reduce using rule 12 (com -> cycle .)
    logico          reduce using rule 12 (com -> cycle .)
    fim_se          reduce using rule 12 (com -> cycle .)
    senao           reduce using rule 12 (com -> cycle .)
    fim_enquanto    reduce using rule 12 (com -> cycle .)
    fim_funcao      reduce using rule 12 (com -> cycle .)
    fim_para        reduce using rule 12 (com -> cycle .)


state 10

    (13) lines -> varName . assign value ;

    assign          shift and go to state 27


state 11

    (14) lines -> varType . : varName_list ;

    :               shift and go to state 28


state 12

    (15) lines -> escreva . value_list ;
    (34) value_list -> . value
    (35) value_list -> . value_list , value
    (36) value_list -> . ( value_list )
    (22) value -> . varName
    (23) value -> . bool
    (24) value -> . calc
    (25) value -> . string
    (26) value -> . varName ( value_list )
    (27) value -> . varName ( )
    (37) bool -> . opt
    (38) bool -> . value e value
    (39) bool -> . value ou value
    (40) bool -> . value xou value
    (41) calc -> . int
    (42) calc -> . float
    (43) calc -> . - value
    (44) calc -> . value + value
    (45) calc -> . value - value
    (46) calc -> . value * value
    (47) calc -> . value / value
    (48) calc -> . value < value
    (49) calc -> . value > value
    (50) calc -> . value dif value
    (51) calc -> . value eq value
    (52) calc -> . value maieq value
    (53) calc -> . value meneq value
    (54) opt -> . verdadeiro
    (55) opt -> . falso
    (56) opt -> . nao opt

    (               shift and go to state 31
    varName         shift and go to state 32
    string          shift and go to state 35
    int             shift and go to state 37
    float           shift and go to state 38
    -               shift and go to state 39
    verdadeiro      shift and go to state 40
    falso           shift and go to state 41
    nao             shift and go to state 42

    value_list                     shift and go to state 29
    value                          shift and go to state 30
    bool                           shift and go to state 33
    calc                           shift and go to state 34
    opt                            shift and go to state 36

state 13

    (16) lines -> leia . value_list ;
    (34) value_list -> . value
    (35) value_list -> . value_list , value
    (36) value_list -> . ( value_list )
    (22) value -> . varName
    (23) value -> . bool
    (24) value -> . calc
    (25) value -> . string
    (26) value -> . varName ( value_list )
    (27) value -> . varName ( )
    (37) bool -> . opt
    (38) bool -> . value e value
    (39) bool -> . value ou value
    (40) bool -> . value xou value
    (41) calc -> . int
    (42) calc -> . float
    (43) calc -> . - value
    (44) calc -> . value + value
    (45) calc -> . value - value
    (46) calc -> . value * value
    (47) calc -> . value / value
    (48) calc -> . value < value
    (49) calc -> . value > value
    (50) calc -> . value dif value
    (51) calc -> . value eq value
    (52) calc -> . value maieq value
    (53) calc -> . value meneq value
    (54) opt -> . verdadeiro
    (55) opt -> . falso
    (56) opt -> . nao opt

    (               shift and go to state 31
    varName         shift and go to state 32
    string          shift and go to state 35
    int             shift and go to state 37
    float           shift and go to state 38
    -               shift and go to state 39
    verdadeiro      shift and go to state 40
    falso           shift and go to state 41
    nao             shift and go to state 42

    value_list                     shift and go to state 43
    value                          shift and go to state 30
    bool                           shift and go to state 33
    calc                           shift and go to state 34
    opt                            shift and go to state 36

state 14

    (17) lines -> retorna . value ;
    (22) value -> . varName
    (23) value -> . bool
    (24) value -> . calc
    (25) value -> . string
    (26) value -> . varName ( value_list )
    (27) value -> . varName ( )
    (37) bool -> . opt
    (38) bool -> . value e value
    (39) bool -> . value ou value
    (40) bool -> . value xou value
    (41) calc -> . int
    (42) calc -> . float
    (43) calc -> . - value
    (44) calc -> . value + value
    (45) calc -> . value - value
    (46) calc -> . value * value
    (47) calc -> . value / value
    (48) calc -> . value < value
    (49) calc -> . value > value
    (50) calc -> . value dif value
    (51) calc -> . value eq value
    (52) calc -> . value maieq value
    (53) calc -> . value meneq value
    (54) opt -> . verdadeiro
    (55) opt -> . falso
    (56) opt -> . nao opt

    varName         shift and go to state 32
    string          shift and go to state 35
    int             shift and go to state 37
    float           shift and go to state 38
    -               shift and go to state 39
    verdadeiro      shift and go to state 40
    falso           shift and go to state 41
    nao             shift and go to state 42

    value                          shift and go to state 44
    bool                           shift and go to state 33
    calc                           shift and go to state 34
    opt                            shift and go to state 36

state 15

    (18) cond -> se . value entao code fim_se
    (19) cond -> se . value entao code senao code fim_se
    (22) value -> . varName
    (23) value -> . bool
    (24) value -> . calc
    (25) value -> . string
    (26) value -> . varName ( value_list )
    (27) value -> . varName ( )
    (37) bool -> . opt
    (38) bool -> . value e value
    (39) bool -> . value ou value
    (40) bool -> . value xou value
    (41) calc -> . int
    (42) calc -> . float
    (43) calc -> . - value
    (44) calc -> . value + value
    (45) calc -> . value - value
    (46) calc -> . value * value
    (47) calc -> . value / value
    (48) calc -> . value < value
    (49) calc -> . value > value
    (50) calc -> . value dif value
    (51) calc -> . value eq value
    (52) calc -> . value maieq value
    (53) calc -> . value meneq value
    (54) opt -> . verdadeiro
    (55) opt -> . falso
    (56) opt -> . nao opt

    varName         shift and go to state 32
    string          shift and go to state 35
    int             shift and go to state 37
    float           shift and go to state 38
    -               shift and go to state 39
    verdadeiro      shift and go to state 40
    falso           shift and go to state 41
    nao             shift and go to state 42

    value                          shift and go to state 45
    bool                           shift and go to state 33
    calc                           shift and go to state 34
    opt                            shift and go to state 36

state 16

    (20) cycle -> para . varName de value ate value passo value faca code fim_para

    varName         shift and go to state 46


state 17

    (21) cycle -> enquanto . value_list faca code fim_enquanto
    (34) value_list -> . value
    (35) value_list -> . value_list , value
    (36) value_list -> . ( value_list )
    (22) value -> . varName
    (23) value -> . bool
    (24) value -> . calc
    (25) value -> . string
    (26) value -> . varName ( value_list )
    (27) value -> . varName ( )
    (37) bool -> . opt
    (38) bool -> . value e value
    (39) bool -> . value ou value
    (40) bool -> . value xou value
    (41) calc -> . int
    (42) calc -> . float
    (43) calc -> . - value
    (44) calc -> . value + value
    (45) calc -> . value - value
    (46) calc -> . value * value
    (47) calc -> . value / value
    (48) calc -> . value < value
    (49) calc -> . value > value
    (50) calc -> . value dif value
    (51) calc -> . value eq value
    (52) calc -> . value maieq value
    (53) calc -> . value meneq value
    (54) opt -> . verdadeiro
    (55) opt -> . falso
    (56) opt -> . nao opt

    (               shift and go to state 31
    varName         shift and go to state 32
    string          shift and go to state 35
    int             shift and go to state 37
    float           shift and go to state 38
    -               shift and go to state 39
    verdadeiro      shift and go to state 40
    falso           shift and go to state 41
    nao             shift and go to state 42

    value_list                     shift and go to state 47
    value                          shift and go to state 30
    bool                           shift and go to state 33
    calc                           shift and go to state 34
    opt                            shift and go to state 36

state 18

    (28) varType -> inteiro .

    :               reduce using rule 28 (varType -> inteiro .)
    varName         reduce using rule 28 (varType -> inteiro .)


state 19

    (29) varType -> real .

    :               reduce using rule 29 (varType -> real .)
    varName         reduce using rule 29 (varType -> real .)


state 20

    (30) varType -> carater .

    :               reduce using rule 30 (varType -> carater .)
    varName         reduce using rule 30 (varType -> carater .)


state 21

    (31) varType -> logico .

    :               reduce using rule 31 (varType -> logico .)
    varName         reduce using rule 31 (varType -> logico .)


state 22

    (2) port -> fun Inicio . code Fim
    (3) code -> . com
    (4) code -> . code com
    (10) com -> . lines
    (11) com -> . cond
    (12) com -> . cycle
    (13) lines -> . varName assign value ;
    (14) lines -> . varType : varName_list ;
    (15) lines -> . escreva value_list ;
    (16) lines -> . leia value_list ;
    (17) lines -> . retorna value ;
    (18) cond -> . se value entao code fim_se
    (19) cond -> . se value entao code senao code fim_se
    (20) cycle -> . para varName de value ate value passo value faca code fim_para
    (21) cycle -> . enquanto value_list faca code fim_enquanto
    (28) varType -> . inteiro
    (29) varType -> . real
    (30) varType -> . carater
    (31) varType -> . logico

    varName         shift and go to state 10
    escreva         shift and go to state 12
    leia            shift and go to state 13
    retorna         shift and go to state 14
    se              shift and go to state 15
    para            shift and go to state 16
    enquanto        shift and go to state 17
    inteiro         shift and go to state 18
    real            shift and go to state 19
    carater         shift and go to state 20
    logico          shift and go to state 21

    code                           shift and go to state 48
    com                            shift and go to state 6
    lines                          shift and go to state 7
    cond                           shift and go to state 8
    cycle                          shift and go to state 9
    varType                        shift and go to state 11

state 23

    (5) fun -> funcao varType . varName ( vars ) : code fim_funcao

    varName         shift and go to state 49


state 24

    (6) fun -> funcao void . varName ( vars ) : code fim_funcao

    varName         shift and go to state 50


state 25

    (1) port -> Inicio code Fim .

    $end            reduce using rule 1 (port -> Inicio code Fim .)


state 26

    (4) code -> code com .

    Fim             reduce using rule 4 (code -> code com .)
    varName         reduce using rule 4 (code -> code com .)
    escreva         reduce using rule 4 (code -> code com .)
    leia            reduce using rule 4 (code -> code com .)
    retorna         reduce using rule 4 (code -> code com .)
    se              reduce using rule 4 (code -> code com .)
    para            reduce using rule 4 (code -> code com .)
    enquanto        reduce using rule 4 (code -> code com .)
    inteiro         reduce using rule 4 (code -> code com .)
    real            reduce using rule 4 (code -> code com .)
    carater         reduce using rule 4 (code -> code com .)
    logico          reduce using rule 4 (code -> code com .)
    fim_se          reduce using rule 4 (code -> code com .)
    senao           reduce using rule 4 (code -> code com .)
    fim_enquanto    reduce using rule 4 (code -> code com .)
    fim_funcao      reduce using rule 4 (code -> code com .)
    fim_para        reduce using rule 4 (code -> code com .)


state 27

    (13) lines -> varName assign . value ;
    (22) value -> . varName
    (23) value -> . bool
    (24) value -> . calc
    (25) value -> . string
    (26) value -> . varName ( value_list )
    (27) value -> . varName ( )
    (37) bool -> . opt
    (38) bool -> . value e value
    (39) bool -> . value ou value
    (40) bool -> . value xou value
    (41) calc -> . int
    (42) calc -> . float
    (43) calc -> . - value
    (44) calc -> . value + value
    (45) calc -> . value - value
    (46) calc -> . value * value
    (47) calc -> . value / value
    (48) calc -> . value < value
    (49) calc -> . value > value
    (50) calc -> . value dif value
    (51) calc -> . value eq value
    (52) calc -> . value maieq value
    (53) calc -> . value meneq value
    (54) opt -> . verdadeiro
    (55) opt -> . falso
    (56) opt -> . nao opt

    varName         shift and go to state 32
    string          shift and go to state 35
    int             shift and go to state 37
    float           shift and go to state 38
    -               shift and go to state 39
    verdadeiro      shift and go to state 40
    falso           shift and go to state 41
    nao             shift and go to state 42

    value                          shift and go to state 51
    bool                           shift and go to state 33
    calc                           shift and go to state 34
    opt                            shift and go to state 36

state 28

    (14) lines -> varType : . varName_list ;
    (32) varName_list -> . varName
    (33) varName_list -> . varName_list , varName

    varName         shift and go to state 53

    varName_list                   shift and go to state 52

state 29

    (15) lines -> escreva value_list . ;
    (35) value_list -> value_list . , value

    ;               shift and go to state 54
    ,               shift and go to state 55


state 30

    (34) value_list -> value .
    (38) bool -> value . e value
    (39) bool -> value . ou value
    (40) bool -> value . xou value
    (44) calc -> value . + value
    (45) calc -> value . - value
    (46) calc -> value . * value
    (47) calc -> value . / value
    (48) calc -> value . < value
    (49) calc -> value . > value
    (50) calc -> value . dif value
    (51) calc -> value . eq value
    (52) calc -> value . maieq value
    (53) calc -> value . meneq value

    ;               reduce using rule 34 (value_list -> value .)
    ,               reduce using rule 34 (value_list -> value .)
    faca            reduce using rule 34 (value_list -> value .)
    )               reduce using rule 34 (value_list -> value .)
    e               shift and go to state 56
    ou              shift and go to state 57
    xou             shift and go to state 58
    +               shift and go to state 59
    -               shift and go to state 60
    *               shift and go to state 61
    /               shift and go to state 62
    <               shift and go to state 63
    >               shift and go to state 64
    dif             shift and go to state 65
    eq              shift and go to state 66
    maieq           shift and go to state 67
    meneq           shift and go to state 68


state 31

    (36) value_list -> ( . value_list )
    (34) value_list -> . value
    (35) value_list -> . value_list , value
    (36) value_list -> . ( value_list )
    (22) value -> . varName
    (23) value -> . bool
    (24) value -> . calc
    (25) value -> . string
    (26) value -> . varName ( value_list )
    (27) value -> . varName ( )
    (37) bool -> . opt
    (38) bool -> . value e value
    (39) bool -> . value ou value
    (40) bool -> . value xou value
    (41) calc -> . int
    (42) calc -> . float
    (43) calc -> . - value
    (44) calc -> . value + value
    (45) calc -> . value - value
    (46) calc -> . value * value
    (47) calc -> . value / value
    (48) calc -> . value < value
    (49) calc -> . value > value
    (50) calc -> . value dif value
    (51) calc -> . value eq value
    (52) calc -> . value maieq value
    (53) calc -> . value meneq value
    (54) opt -> . verdadeiro
    (55) opt -> . falso
    (56) opt -> . nao opt

    (               shift and go to state 31
    varName         shift and go to state 32
    string          shift and go to state 35
    int             shift and go to state 37
    float           shift and go to state 38
    -               shift and go to state 39
    verdadeiro      shift and go to state 40
    falso           shift and go to state 41
    nao             shift and go to state 42

    value_list                     shift and go to state 69
    value                          shift and go to state 30
    bool                           shift and go to state 33
    calc                           shift and go to state 34
    opt                            shift and go to state 36

state 32

    (22) value -> varName .
    (26) value -> varName . ( value_list )
    (27) value -> varName . ( )

    e               reduce using rule 22 (value -> varName .)
    ou              reduce using rule 22 (value -> varName .)
    xou             reduce using rule 22 (value -> varName .)
    +               reduce using rule 22 (value -> varName .)
    -               reduce using rule 22 (value -> varName .)
    *               reduce using rule 22 (value -> varName .)
    /               reduce using rule 22 (value -> varName .)
    <               reduce using rule 22 (value -> varName .)
    >               reduce using rule 22 (value -> varName .)
    dif             reduce using rule 22 (value -> varName .)
    eq              reduce using rule 22 (value -> varName .)
    maieq           reduce using rule 22 (value -> varName .)
    meneq           reduce using rule 22 (value -> varName .)
    ;               reduce using rule 22 (value -> varName .)
    ,               reduce using rule 22 (value -> varName .)
    entao           reduce using rule 22 (value -> varName .)
    faca            reduce using rule 22 (value -> varName .)
    )               reduce using rule 22 (value -> varName .)
    ate             reduce using rule 22 (value -> varName .)
    passo           reduce using rule 22 (value -> varName .)
    (               shift and go to state 70


state 33

    (23) value -> bool .

    e               reduce using rule 23 (value -> bool .)
    ou              reduce using rule 23 (value -> bool .)
    xou             reduce using rule 23 (value -> bool .)
    +               reduce using rule 23 (value -> bool .)
    -               reduce using rule 23 (value -> bool .)
    *               reduce using rule 23 (value -> bool .)
    /               reduce using rule 23 (value -> bool .)
    <               reduce using rule 23 (value -> bool .)
    >               reduce using rule 23 (value -> bool .)
    dif             reduce using rule 23 (value -> bool .)
    eq              reduce using rule 23 (value -> bool .)
    maieq           reduce using rule 23 (value -> bool .)
    meneq           reduce using rule 23 (value -> bool .)
    ;               reduce using rule 23 (value -> bool .)
    ,               reduce using rule 23 (value -> bool .)
    entao           reduce using rule 23 (value -> bool .)
    faca            reduce using rule 23 (value -> bool .)
    )               reduce using rule 23 (value -> bool .)
    ate             reduce using rule 23 (value -> bool .)
    passo           reduce using rule 23 (value -> bool .)


state 34

    (24) value -> calc .

    e               reduce using rule 24 (value -> calc .)
    ou              reduce using rule 24 (value -> calc .)
    xou             reduce using rule 24 (value -> calc .)
    +               reduce using rule 24 (value -> calc .)
    -               reduce using rule 24 (value -> calc .)
    *               reduce using rule 24 (value -> calc .)
    /               reduce using rule 24 (value -> calc .)
    <               reduce using rule 24 (value -> calc .)
    >               reduce using rule 24 (value -> calc .)
    dif             reduce using rule 24 (value -> calc .)
    eq              reduce using rule 24 (value -> calc .)
    maieq           reduce using rule 24 (value -> calc .)
    meneq           reduce using rule 24 (value -> calc .)
    ;               reduce using rule 24 (value -> calc .)
    ,               reduce using rule 24 (value -> calc .)
    entao           reduce using rule 24 (value -> calc .)
    faca            reduce using rule 24 (value -> calc .)
    )               reduce using rule 24 (value -> calc .)
    ate             reduce using rule 24 (value -> calc .)
    passo           reduce using rule 24 (value -> calc .)


state 35

    (25) value -> string .

    e               reduce using rule 25 (value -> string .)
    ou              reduce using rule 25 (value -> string .)
    xou             reduce using rule 25 (value -> string .)
    +               reduce using rule 25 (value -> string .)
    -               reduce using rule 25 (value -> string .)
    *               reduce using rule 25 (value -> string .)
    /               reduce using rule 25 (value -> string .)
    <               reduce using rule 25 (value -> string .)
    >               reduce using rule 25 (value -> string .)
    dif             reduce using rule 25 (value -> string .)
    eq              reduce using rule 25 (value -> string .)
    maieq           reduce using rule 25 (value -> string .)
    meneq           reduce using rule 25 (value -> string .)
    ;               reduce using rule 25 (value -> string .)
    ,               reduce using rule 25 (value -> string .)
    entao           reduce using rule 25 (value -> string .)
    faca            reduce using rule 25 (value -> string .)
    )               reduce using rule 25 (value -> string .)
    ate             reduce using rule 25 (value -> string .)
    passo           reduce using rule 25 (value -> string .)


state 36

    (37) bool -> opt .

    e               reduce using rule 37 (bool -> opt .)
    ou              reduce using rule 37 (bool -> opt .)
    xou             reduce using rule 37 (bool -> opt .)
    +               reduce using rule 37 (bool -> opt .)
    -               reduce using rule 37 (bool -> opt .)
    *               reduce using rule 37 (bool -> opt .)
    /               reduce using rule 37 (bool -> opt .)
    <               reduce using rule 37 (bool -> opt .)
    >               reduce using rule 37 (bool -> opt .)
    dif             reduce using rule 37 (bool -> opt .)
    eq              reduce using rule 37 (bool -> opt .)
    maieq           reduce using rule 37 (bool -> opt .)
    meneq           reduce using rule 37 (bool -> opt .)
    ;               reduce using rule 37 (bool -> opt .)
    ,               reduce using rule 37 (bool -> opt .)
    entao           reduce using rule 37 (bool -> opt .)
    faca            reduce using rule 37 (bool -> opt .)
    )               reduce using rule 37 (bool -> opt .)
    ate             reduce using rule 37 (bool -> opt .)
    passo           reduce using rule 37 (bool -> opt .)


state 37

    (41) calc -> int .

    e               reduce using rule 41 (calc -> int .)
    ou              reduce using rule 41 (calc -> int .)
    xou             reduce using rule 41 (calc -> int .)
    +               reduce using rule 41 (calc -> int .)
    -               reduce using rule 41 (calc -> int .)
    *               reduce using rule 41 (calc -> int .)
    /               reduce using rule 41 (calc -> int .)
    <               reduce using rule 41 (calc -> int .)
    >               reduce using rule 41 (calc -> int .)
    dif             reduce using rule 41 (calc -> int .)
    eq              reduce using rule 41 (calc -> int .)
    maieq           reduce using rule 41 (calc -> int .)
    meneq           reduce using rule 41 (calc -> int .)
    ;               reduce using rule 41 (calc -> int .)
    ,               reduce using rule 41 (calc -> int .)
    entao           reduce using rule 41 (calc -> int .)
    faca            reduce using rule 41 (calc -> int .)
    )               reduce using rule 41 (calc -> int .)
    ate             reduce using rule 41 (calc -> int .)
    passo           reduce using rule 41 (calc -> int .)


state 38

    (42) calc -> float .

    e               reduce using rule 42 (calc -> float .)
    ou              reduce using rule 42 (calc -> float .)
    xou             reduce using rule 42 (calc -> float .)
    +               reduce using rule 42 (calc -> float .)
    -               reduce using rule 42 (calc -> float .)
    *               reduce using rule 42 (calc -> float .)
    /               reduce using rule 42 (calc -> float .)
    <               reduce using rule 42 (calc -> float .)
    >               reduce using rule 42 (calc -> float .)
    dif             reduce using rule 42 (calc -> float .)
    eq              reduce using rule 42 (calc -> float .)
    maieq           reduce using rule 42 (calc -> float .)
    meneq           reduce using rule 42 (calc -> float .)
    ;               reduce using rule 42 (calc -> float .)
    ,               reduce using rule 42 (calc -> float .)
    entao           reduce using rule 42 (calc -> float .)
    faca            reduce using rule 42 (calc -> float .)
    )               reduce using rule 42 (calc -> float .)
    ate             reduce using rule 42 (calc -> float .)
    passo           reduce using rule 42 (calc -> float .)


state 39

    (43) calc -> - . value
    (22) value -> . varName
    (23) value -> . bool
    (24) value -> . calc
    (25) value -> . string
    (26) value -> . varName ( value_list )
    (27) value -> . varName ( )
    (37) bool -> . opt
    (38) bool -> . value e value
    (39) bool -> . value ou value
    (40) bool -> . value xou value
    (41) calc -> . int
    (42) calc -> . float
    (43) calc -> . - value
    (44) calc -> . value + value
    (45) calc -> . value - value
    (46) calc -> . value * value
    (47) calc -> . value / value
    (48) calc -> . value < value
    (49) calc -> . value > value
    (50) calc -> . value dif value
    (51) calc -> . value eq value
    (52) calc -> . value maieq value
    (53) calc -> . value meneq value
    (54) opt -> . verdadeiro
    (55) opt -> . falso
    (56) opt -> . nao opt

    varName         shift and go to state 32
    string          shift and go to state 35
    int             shift and go to state 37
    float           shift and go to state 38
    -               shift and go to state 39
    verdadeiro      shift and go to state 40
    falso           shift and go to state 41
    nao             shift and go to state 42

    value                          shift and go to state 71
    bool                           shift and go to state 33
    calc                           shift and go to state 34
    opt                            shift and go to state 36

state 40

    (54) opt -> verdadeiro .

    e               reduce using rule 54 (opt -> verdadeiro .)
    ou              reduce using rule 54 (opt -> verdadeiro .)
    xou             reduce using rule 54 (opt -> verdadeiro .)
    +               reduce using rule 54 (opt -> verdadeiro .)
    -               reduce using rule 54 (opt -> verdadeiro .)
    *               reduce using rule 54 (opt -> verdadeiro .)
    /               reduce using rule 54 (opt -> verdadeiro .)
    <               reduce using rule 54 (opt -> verdadeiro .)
    >               reduce using rule 54 (opt -> verdadeiro .)
    dif             reduce using rule 54 (opt -> verdadeiro .)
    eq              reduce using rule 54 (opt -> verdadeiro .)
    maieq           reduce using rule 54 (opt -> verdadeiro .)
    meneq           reduce using rule 54 (opt -> verdadeiro .)
    ;               reduce using rule 54 (opt -> verdadeiro .)
    ,               reduce using rule 54 (opt -> verdadeiro .)
    entao           reduce using rule 54 (opt -> verdadeiro .)
    faca            reduce using rule 54 (opt -> verdadeiro .)
    )               reduce using rule 54 (opt -> verdadeiro .)
    ate             reduce using rule 54 (opt -> verdadeiro .)
    passo           reduce using rule 54 (opt -> verdadeiro .)


state 41

    (55) opt -> falso .

    e               reduce using rule 55 (opt -> falso .)
    ou              reduce using rule 55 (opt -> falso .)
    xou             reduce using rule 55 (opt -> falso .)
    +               reduce using rule 55 (opt -> falso .)
    -               reduce using rule 55 (opt -> falso .)
    *               reduce using rule 55 (opt -> falso .)
    /               reduce using rule 55 (opt -> falso .)
    <               reduce using rule 55 (opt -> falso .)
    >               reduce using rule 55 (opt -> falso .)
    dif             reduce using rule 55 (opt -> falso .)
    eq              reduce using rule 55 (opt -> falso .)
    maieq           reduce using rule 55 (opt -> falso .)
    meneq           reduce using rule 55 (opt -> falso .)
    ;               reduce using rule 55 (opt -> falso .)
    ,               reduce using rule 55 (opt -> falso .)
    entao           reduce using rule 55 (opt -> falso .)
    faca            reduce using rule 55 (opt -> falso .)
    )               reduce using rule 55 (opt -> falso .)
    ate             reduce using rule 55 (opt -> falso .)
    passo           reduce using rule 55 (opt -> falso .)


state 42

    (56) opt -> nao . opt
    (54) opt -> . verdadeiro
    (55) opt -> . falso
    (56) opt -> . nao opt

    verdadeiro      shift and go to state 40
    falso           shift and go to state 41
    nao             shift and go to state 42

    opt                            shift and go to state 72

state 43

    (16) lines -> leia value_list . ;
    (35) value_list -> value_list . , value

    ;               shift and go to state 73
    ,               shift and go to state 55


state 44

    (17) lines -> retorna value . ;
    (38) bool -> value . e value
    (39) bool -> value . ou value
    (40) bool -> value . xou value
    (44) calc -> value . + value
    (45) calc -> value . - value
    (46) calc -> value . * value
    (47) calc -> value . / value
    (48) calc -> value . < value
    (49) calc -> value . > value
    (50) calc -> value . dif value
    (51) calc -> value . eq value
    (52) calc -> value . maieq value
    (53) calc -> value . meneq value

    ;               shift and go to state 74
    e               shift and go to state 56
    ou              shift and go to state 57
    xou             shift and go to state 58
    +               shift and go to state 59
    -               shift and go to state 60
    *               shift and go to state 61
    /               shift and go to state 62
    <               shift and go to state 63
    >               shift and go to state 64
    dif             shift and go to state 65
    eq              shift and go to state 66
    maieq           shift and go to state 67
    meneq           shift and go to state 68


state 45

    (18) cond -> se value . entao code fim_se
    (19) cond -> se value . entao code senao code fim_se
    (38) bool -> value . e value
    (39) bool -> value . ou value
    (40) bool -> value . xou value
    (44) calc -> value . + value
    (45) calc -> value . - value
    (46) calc -> value . * value
    (47) calc -> value . / value
    (48) calc -> value . < value
    (49) calc -> value . > value
    (50) calc -> value . dif value
    (51) calc -> value . eq value
    (52) calc -> value . maieq value
    (53) calc -> value . meneq value

    entao           shift and go to state 75
    e               shift and go to state 56
    ou              shift and go to state 57
    xou             shift and go to state 58
    +               shift and go to state 59
    -               shift and go to state 60
    *               shift and go to state 61
    /               shift and go to state 62
    <               shift and go to state 63
    >               shift and go to state 64
    dif             shift and go to state 65
    eq              shift and go to state 66
    maieq           shift and go to state 67
    meneq           shift and go to state 68


state 46

    (20) cycle -> para varName . de value ate value passo value faca code fim_para

    de              shift and go to state 76


state 47

    (21) cycle -> enquanto value_list . faca code fim_enquanto
    (35) value_list -> value_list . , value

    faca            shift and go to state 77
    ,               shift and go to state 55


state 48

    (2) port -> fun Inicio code . Fim
    (4) code -> code . com
    (10) com -> . lines
    (11) com -> . cond
    (12) com -> . cycle
    (13) lines -> . varName assign value ;
    (14) lines -> . varType : varName_list ;
    (15) lines -> . escreva value_list ;
    (16) lines -> . leia value_list ;
    (17) lines -> . retorna value ;
    (18) cond -> . se value entao code fim_se
    (19) cond -> . se value entao code senao code fim_se
    (20) cycle -> . para varName de value ate value passo value faca code fim_para
    (21) cycle -> . enquanto value_list faca code fim_enquanto
    (28) varType -> . inteiro
    (29) varType -> . real
    (30) varType -> . carater
    (31) varType -> . logico

    Fim             shift and go to state 78
    varName         shift and go to state 10
    escreva         shift and go to state 12
    leia            shift and go to state 13
    retorna         shift and go to state 14
    se              shift and go to state 15
    para            shift and go to state 16
    enquanto        shift and go to state 17
    inteiro         shift and go to state 18
    real            shift and go to state 19
    carater         shift and go to state 20
    logico          shift and go to state 21

    com                            shift and go to state 26
    lines                          shift and go to state 7
    cond                           shift and go to state 8
    cycle                          shift and go to state 9
    varType                        shift and go to state 11

state 49

    (5) fun -> funcao varType varName . ( vars ) : code fim_funcao

    (               shift and go to state 79


state 50

    (6) fun -> funcao void varName . ( vars ) : code fim_funcao

    (               shift and go to state 80


state 51

    (13) lines -> varName assign value . ;
    (38) bool -> value . e value
    (39) bool -> value . ou value
    (40) bool -> value . xou value
    (44) calc -> value . + value
    (45) calc -> value . - value
    (46) calc -> value . * value
    (47) calc -> value . / value
    (48) calc -> value . < value
    (49) calc -> value . > value
    (50) calc -> value . dif value
    (51) calc -> value . eq value
    (52) calc -> value . maieq value
    (53) calc -> value . meneq value

    ;               shift and go to state 81
    e               shift and go to state 56
    ou              shift and go to state 57
    xou             shift and go to state 58
    +               shift and go to state 59
    -               shift and go to state 60
    *               shift and go to state 61
    /               shift and go to state 62
    <               shift and go to state 63
    >               shift and go to state 64
    dif             shift and go to state 65
    eq              shift and go to state 66
    maieq           shift and go to state 67
    meneq           shift and go to state 68


state 52

    (14) lines -> varType : varName_list . ;
    (33) varName_list -> varName_list . , varName

    ;               shift and go to state 82
    ,               shift and go to state 83


state 53

    (32) varName_list -> varName .

    ;               reduce using rule 32 (varName_list -> varName .)
    ,               reduce using rule 32 (varName_list -> varName .)


state 54

    (15) lines -> escreva value_list ; .

    Fim             reduce using rule 15 (lines -> escreva value_list ; .)
    varName         reduce using rule 15 (lines -> escreva value_list ; .)
    escreva         reduce using rule 15 (lines -> escreva value_list ; .)
    leia            reduce using rule 15 (lines -> escreva value_list ; .)
    retorna         reduce using rule 15 (lines -> escreva value_list ; .)
    se              reduce using rule 15 (lines -> escreva value_list ; .)
    para            reduce using rule 15 (lines -> escreva value_list ; .)
    enquanto        reduce using rule 15 (lines -> escreva value_list ; .)
    inteiro         reduce using rule 15 (lines -> escreva value_list ; .)
    real            reduce using rule 15 (lines -> escreva value_list ; .)
    carater         reduce using rule 15 (lines -> escreva value_list ; .)
    logico          reduce using rule 15 (lines -> escreva value_list ; .)
    fim_se          reduce using rule 15 (lines -> escreva value_list ; .)
    senao           reduce using rule 15 (lines -> escreva value_list ; .)
    fim_enquanto    reduce using rule 15 (lines -> escreva value_list ; .)
    fim_funcao      reduce using rule 15 (lines -> escreva value_list ; .)
    fim_para        reduce using rule 15 (lines -> escreva value_list ; .)


state 55

    (35) value_list -> value_list , . value
    (22) value -> . varName
    (23) value -> . bool
    (24) value -> . calc
    (25) value -> . string
    (26) value -> . varName ( value_list )
    (27) value -> . varName ( )
    (37) bool -> . opt
    (38) bool -> . value e value
    (39) bool -> . value ou value
    (40) bool -> . value xou value
    (41) calc -> . int
    (42) calc -> . float
    (43) calc -> . - value
    (44) calc -> . value + value
    (45) calc -> . value - value
    (46) calc -> . value * value
    (47) calc -> . value / value
    (48) calc -> . value < value
    (49) calc -> . value > value
    (50) calc -> . value dif value
    (51) calc -> . value eq value
    (52) calc -> . value maieq value
    (53) calc -> . value meneq value
    (54) opt -> . verdadeiro
    (55) opt -> . falso
    (56) opt -> . nao opt

    varName         shift and go to state 32
    string          shift and go to state 35
    int             shift and go to state 37
    float           shift and go to state 38
    -               shift and go to state 39
    verdadeiro      shift and go to state 40
    falso           shift and go to state 41
    nao             shift and go to state 42

    value                          shift and go to state 84
    bool                           shift and go to state 33
    calc                           shift and go to state 34
    opt                            shift and go to state 36

state 56

    (38) bool -> value e . value
    (22) value -> . varName
    (23) value -> . bool
    (24) value -> . calc
    (25) value -> . string
    (26) value -> . varName ( value_list )
    (27) value -> . varName ( )
    (37) bool -> . opt
    (38) bool -> . value e value
    (39) bool -> . value ou value
    (40) bool -> . value xou value
    (41) calc -> . int
    (42) calc -> . float
    (43) calc -> . - value
    (44) calc -> . value + value
    (45) calc -> . value - value
    (46) calc -> . value * value
    (47) calc -> . value / value
    (48) calc -> . value < value
    (49) calc -> . value > value
    (50) calc -> . value dif value
    (51) calc -> . value eq value
    (52) calc -> . value maieq value
    (53) calc -> . value meneq value
    (54) opt -> . verdadeiro
    (55) opt -> . falso
    (56) opt -> . nao opt

    varName         shift and go to state 32
    string          shift and go to state 35
    int             shift and go to state 37
    float           shift and go to state 38
    -               shift and go to state 39
    verdadeiro      shift and go to state 40
    falso           shift and go to state 41
    nao             shift and go to state 42

    value                          shift and go to state 85
    bool                           shift and go to state 33
    calc                           shift and go to state 34
    opt                            shift and go to state 36

state 57

    (39) bool -> value ou . value
    (22) value -> . varName
    (23) value -> . bool
    (24) value -> . calc
    (25) value -> . string
    (26) value -> . varName ( value_list )
    (27) value -> . varName ( )
    (37) bool -> . opt
    (38) bool -> . value e value
    (39) bool -> . value ou value
    (40) bool -> . value xou value
    (41) calc -> . int
    (42) calc -> . float
    (43) calc -> . - value
    (44) calc -> . value + value
    (45) calc -> . value - value
    (46) calc -> . value * value
    (47) calc -> . value / value
    (48) calc -> . value < value
    (49) calc -> . value > value
    (50) calc -> . value dif value
    (51) calc -> . value eq value
    (52) calc -> . value maieq value
    (53) calc -> . value meneq value
    (54) opt -> . verdadeiro
    (55) opt -> . falso
    (56) opt -> . nao opt

    varName         shift and go to state 32
    string          shift and go to state 35
    int             shift and go to state 37
    float           shift and go to state 38
    -               shift and go to state 39
    verdadeiro      shift and go to state 40
    falso           shift and go to state 41
    nao             shift and go to state 42

    value                          shift and go to state 86
    bool                           shift and go to state 33
    calc                           shift and go to state 34
    opt                            shift and go to state 36

state 58

    (40) bool -> value xou . value
    (22) value -> . varName
    (23) value -> . bool
    (24) value -> . calc
    (25) value -> . string
    (26) value -> . varName ( value_list )
    (27) value -> . varName ( )
    (37) bool -> . opt
    (38) bool -> . value e value
    (39) bool -> . value ou value
    (40) bool -> . value xou value
    (41) calc -> . int
    (42) calc -> . float
    (43) calc -> . - value
    (44) calc -> . value + value
    (45) calc -> . value - value
    (46) calc -> . value * value
    (47) calc -> . value / value
    (48) calc -> . value < value
    (49) calc -> . value > value
    (50) calc -> . value dif value
    (51) calc -> . value eq value
    (52) calc -> . value maieq value
    (53) calc -> . value meneq value
    (54) opt -> . verdadeiro
    (55) opt -> . falso
    (56) opt -> . nao opt

    varName         shift and go to state 32
    string          shift and go to state 35
    int             shift and go to state 37
    float           shift and go to state 38
    -               shift and go to state 39
    verdadeiro      shift and go to state 40
    falso           shift and go to state 41
    nao             shift and go to state 42

    value                          shift and go to state 87
    bool                           shift and go to state 33
    calc                           shift and go to state 34
    opt                            shift and go to state 36

state 59

    (44) calc -> value + . value
    (22) value -> . varName
    (23) value -> . bool
    (24) value -> . calc
    (25) value -> . string
    (26) value -> . varName ( value_list )
    (27) value -> . varName ( )
    (37) bool -> . opt
    (38) bool -> . value e value
    (39) bool -> . value ou value
    (40) bool -> . value xou value
    (41) calc -> . int
    (42) calc -> . float
    (43) calc -> . - value
    (44) calc -> . value + value
    (45) calc -> . value - value
    (46) calc -> . value * value
    (47) calc -> . value / value
    (48) calc -> . value < value
    (49) calc -> . value > value
    (50) calc -> . value dif value
    (51) calc -> . value eq value
    (52) calc -> . value maieq value
    (53) calc -> . value meneq value
    (54) opt -> . verdadeiro
    (55) opt -> . falso
    (56) opt -> . nao opt

    varName         shift and go to state 32
    string          shift and go to state 35
    int             shift and go to state 37
    float           shift and go to state 38
    -               shift and go to state 39
    verdadeiro      shift and go to state 40
    falso           shift and go to state 41
    nao             shift and go to state 42

    value                          shift and go to state 88
    bool                           shift and go to state 33
    calc                           shift and go to state 34
    opt                            shift and go to state 36

state 60

    (45) calc -> value - . value
    (22) value -> . varName
    (23) value -> . bool
    (24) value -> . calc
    (25) value -> . string
    (26) value -> . varName ( value_list )
    (27) value -> . varName ( )
    (37) bool -> . opt
    (38) bool -> . value e value
    (39) bool -> . value ou value
    (40) bool -> . value xou value
    (41) calc -> . int
    (42) calc -> . float
    (43) calc -> . - value
    (44) calc -> . value + value
    (45) calc -> . value - value
    (46) calc -> . value * value
    (47) calc -> . value / value
    (48) calc -> . value < value
    (49) calc -> . value > value
    (50) calc -> . value dif value
    (51) calc -> . value eq value
    (52) calc -> . value maieq value
    (53) calc -> . value meneq value
    (54) opt -> . verdadeiro
    (55) opt -> . falso
    (56) opt -> . nao opt

    varName         shift and go to state 32
    string          shift and go to state 35
    int             shift and go to state 37
    float           shift and go to state 38
    -               shift and go to state 39
    verdadeiro      shift and go to state 40
    falso           shift and go to state 41
    nao             shift and go to state 42

    value                          shift and go to state 89
    bool                           shift and go to state 33
    calc                           shift and go to state 34
    opt                            shift and go to state 36

state 61

    (46) calc -> value * . value
    (22) value -> . varName
    (23) value -> . bool
    (24) value -> . calc
    (25) value -> . string
    (26) value -> . varName ( value_list )
    (27) value -> . varName ( )
    (37) bool -> . opt
    (38) bool -> . value e value
    (39) bool -> . value ou value
    (40) bool -> . value xou value
    (41) calc -> . int
    (42) calc -> . float
    (43) calc -> . - value
    (44) calc -> . value + value
    (45) calc -> . value - value
    (46) calc -> . value * value
    (47) calc -> . value / value
    (48) calc -> . value < value
    (49) calc -> . value > value
    (50) calc -> . value dif value
    (51) calc -> . value eq value
    (52) calc -> . value maieq value
    (53) calc -> . value meneq value
    (54) opt -> . verdadeiro
    (55) opt -> . falso
    (56) opt -> . nao opt

    varName         shift and go to state 32
    string          shift and go to state 35
    int             shift and go to state 37
    float           shift and go to state 38
    -               shift and go to state 39
    verdadeiro      shift and go to state 40
    falso           shift and go to state 41
    nao             shift and go to state 42

    value                          shift and go to state 90
    bool                           shift and go to state 33
    calc                           shift and go to state 34
    opt                            shift and go to state 36

state 62

    (47) calc -> value / . value
    (22) value -> . varName
    (23) value -> . bool
    (24) value -> . calc
    (25) value -> . string
    (26) value -> . varName ( value_list )
    (27) value -> . varName ( )
    (37) bool -> . opt
    (38) bool -> . value e value
    (39) bool -> . value ou value
    (40) bool -> . value xou value
    (41) calc -> . int
    (42) calc -> . float
    (43) calc -> . - value
    (44) calc -> . value + value
    (45) calc -> . value - value
    (46) calc -> . value * value
    (47) calc -> . value / value
    (48) calc -> . value < value
    (49) calc -> . value > value
    (50) calc -> . value dif value
    (51) calc -> . value eq value
    (52) calc -> . value maieq value
    (53) calc -> . value meneq value
    (54) opt -> . verdadeiro
    (55) opt -> . falso
    (56) opt -> . nao opt

    varName         shift and go to state 32
    string          shift and go to state 35
    int             shift and go to state 37
    float           shift and go to state 38
    -               shift and go to state 39
    verdadeiro      shift and go to state 40
    falso           shift and go to state 41
    nao             shift and go to state 42

    value                          shift and go to state 91
    bool                           shift and go to state 33
    calc                           shift and go to state 34
    opt                            shift and go to state 36

state 63

    (48) calc -> value < . value
    (22) value -> . varName
    (23) value -> . bool
    (24) value -> . calc
    (25) value -> . string
    (26) value -> . varName ( value_list )
    (27) value -> . varName ( )
    (37) bool -> . opt
    (38) bool -> . value e value
    (39) bool -> . value ou value
    (40) bool -> . value xou value
    (41) calc -> . int
    (42) calc -> . float
    (43) calc -> . - value
    (44) calc -> . value + value
    (45) calc -> . value - value
    (46) calc -> . value * value
    (47) calc -> . value / value
    (48) calc -> . value < value
    (49) calc -> . value > value
    (50) calc -> . value dif value
    (51) calc -> . value eq value
    (52) calc -> . value maieq value
    (53) calc -> . value meneq value
    (54) opt -> . verdadeiro
    (55) opt -> . falso
    (56) opt -> . nao opt

    varName         shift and go to state 32
    string          shift and go to state 35
    int             shift and go to state 37
    float           shift and go to state 38
    -               shift and go to state 39
    verdadeiro      shift and go to state 40
    falso           shift and go to state 41
    nao             shift and go to state 42

    value                          shift and go to state 92
    bool                           shift and go to state 33
    calc                           shift and go to state 34
    opt                            shift and go to state 36

state 64

    (49) calc -> value > . value
    (22) value -> . varName
    (23) value -> . bool
    (24) value -> . calc
    (25) value -> . string
    (26) value -> . varName ( value_list )
    (27) value -> . varName ( )
    (37) bool -> . opt
    (38) bool -> . value e value
    (39) bool -> . value ou value
    (40) bool -> . value xou value
    (41) calc -> . int
    (42) calc -> . float
    (43) calc -> . - value
    (44) calc -> . value + value
    (45) calc -> . value - value
    (46) calc -> . value * value
    (47) calc -> . value / value
    (48) calc -> . value < value
    (49) calc -> . value > value
    (50) calc -> . value dif value
    (51) calc -> . value eq value
    (52) calc -> . value maieq value
    (53) calc -> . value meneq value
    (54) opt -> . verdadeiro
    (55) opt -> . falso
    (56) opt -> . nao opt

    varName         shift and go to state 32
    string          shift and go to state 35
    int             shift and go to state 37
    float           shift and go to state 38
    -               shift and go to state 39
    verdadeiro      shift and go to state 40
    falso           shift and go to state 41
    nao             shift and go to state 42

    value                          shift and go to state 93
    bool                           shift and go to state 33
    calc                           shift and go to state 34
    opt                            shift and go to state 36

state 65

    (50) calc -> value dif . value
    (22) value -> . varName
    (23) value -> . bool
    (24) value -> . calc
    (25) value -> . string
    (26) value -> . varName ( value_list )
    (27) value -> . varName ( )
    (37) bool -> . opt
    (38) bool -> . value e value
    (39) bool -> . value ou value
    (40) bool -> . value xou value
    (41) calc -> . int
    (42) calc -> . float
    (43) calc -> . - value
    (44) calc -> . value + value
    (45) calc -> . value - value
    (46) calc -> . value * value
    (47) calc -> . value / value
    (48) calc -> . value < value
    (49) calc -> . value > value
    (50) calc -> . value dif value
    (51) calc -> . value eq value
    (52) calc -> . value maieq value
    (53) calc -> . value meneq value
    (54) opt -> . verdadeiro
    (55) opt -> . falso
    (56) opt -> . nao opt

    varName         shift and go to state 32
    string          shift and go to state 35
    int             shift and go to state 37
    float           shift and go to state 38
    -               shift and go to state 39
    verdadeiro      shift and go to state 40
    falso           shift and go to state 41
    nao             shift and go to state 42

    value                          shift and go to state 94
    bool                           shift and go to state 33
    calc                           shift and go to state 34
    opt                            shift and go to state 36

state 66

    (51) calc -> value eq . value
    (22) value -> . varName
    (23) value -> . bool
    (24) value -> . calc
    (25) value -> . string
    (26) value -> . varName ( value_list )
    (27) value -> . varName ( )
    (37) bool -> . opt
    (38) bool -> . value e value
    (39) bool -> . value ou value
    (40) bool -> . value xou value
    (41) calc -> . int
    (42) calc -> . float
    (43) calc -> . - value
    (44) calc -> . value + value
    (45) calc -> . value - value
    (46) calc -> . value * value
    (47) calc -> . value / value
    (48) calc -> . value < value
    (49) calc -> . value > value
    (50) calc -> . value dif value
    (51) calc -> . value eq value
    (52) calc -> . value maieq value
    (53) calc -> . value meneq value
    (54) opt -> . verdadeiro
    (55) opt -> . falso
    (56) opt -> . nao opt

    varName         shift and go to state 32
    string          shift and go to state 35
    int             shift and go to state 37
    float           shift and go to state 38
    -               shift and go to state 39
    verdadeiro      shift and go to state 40
    falso           shift and go to state 41
    nao             shift and go to state 42

    value                          shift and go to state 95
    bool                           shift and go to state 33
    calc                           shift and go to state 34
    opt                            shift and go to state 36

state 67

    (52) calc -> value maieq . value
    (22) value -> . varName
    (23) value -> . bool
    (24) value -> . calc
    (25) value -> . string
    (26) value -> . varName ( value_list )
    (27) value -> . varName ( )
    (37) bool -> . opt
    (38) bool -> . value e value
    (39) bool -> . value ou value
    (40) bool -> . value xou value
    (41) calc -> . int
    (42) calc -> . float
    (43) calc -> . - value
    (44) calc -> . value + value
    (45) calc -> . value - value
    (46) calc -> . value * value
    (47) calc -> . value / value
    (48) calc -> . value < value
    (49) calc -> . value > value
    (50) calc -> . value dif value
    (51) calc -> . value eq value
    (52) calc -> . value maieq value
    (53) calc -> . value meneq value
    (54) opt -> . verdadeiro
    (55) opt -> . falso
    (56) opt -> . nao opt

    varName         shift and go to state 32
    string          shift and go to state 35
    int             shift and go to state 37
    float           shift and go to state 38
    -               shift and go to state 39
    verdadeiro      shift and go to state 40
    falso           shift and go to state 41
    nao             shift and go to state 42

    value                          shift and go to state 96
    bool                           shift and go to state 33
    calc                           shift and go to state 34
    opt                            shift and go to state 36

state 68

    (53) calc -> value meneq . value
    (22) value -> . varName
    (23) value -> . bool
    (24) value -> . calc
    (25) value -> . string
    (26) value -> . varName ( value_list )
    (27) value -> . varName ( )
    (37) bool -> . opt
    (38) bool -> . value e value
    (39) bool -> . value ou value
    (40) bool -> . value xou value
    (41) calc -> . int
    (42) calc -> . float
    (43) calc -> . - value
    (44) calc -> . value + value
    (45) calc -> . value - value
    (46) calc -> . value * value
    (47) calc -> . value / value
    (48) calc -> . value < value
    (49) calc -> . value > value
    (50) calc -> . value dif value
    (51) calc -> . value eq value
    (52) calc -> . value maieq value
    (53) calc -> . value meneq value
    (54) opt -> . verdadeiro
    (55) opt -> . falso
    (56) opt -> . nao opt

    varName         shift and go to state 32
    string          shift and go to state 35
    int             shift and go to state 37
    float           shift and go to state 38
    -               shift and go to state 39
    verdadeiro      shift and go to state 40
    falso           shift and go to state 41
    nao             shift and go to state 42

    value                          shift and go to state 97
    bool                           shift and go to state 33
    calc                           shift and go to state 34
    opt                            shift and go to state 36

state 69

    (36) value_list -> ( value_list . )
    (35) value_list -> value_list . , value

    )               shift and go to state 98
    ,               shift and go to state 55


state 70

    (26) value -> varName ( . value_list )
    (27) value -> varName ( . )
    (34) value_list -> . value
    (35) value_list -> . value_list , value
    (36) value_list -> . ( value_list )
    (22) value -> . varName
    (23) value -> . bool
    (24) value -> . calc
    (25) value -> . string
    (26) value -> . varName ( value_list )
    (27) value -> . varName ( )
    (37) bool -> . opt
    (38) bool -> . value e value
    (39) bool -> . value ou value
    (40) bool -> . value xou value
    (41) calc -> . int
    (42) calc -> . float
    (43) calc -> . - value
    (44) calc -> . value + value
    (45) calc -> . value - value
    (46) calc -> . value * value
    (47) calc -> . value / value
    (48) calc -> . value < value
    (49) calc -> . value > value
    (50) calc -> . value dif value
    (51) calc -> . value eq value
    (52) calc -> . value maieq value
    (53) calc -> . value meneq value
    (54) opt -> . verdadeiro
    (55) opt -> . falso
    (56) opt -> . nao opt

    )               shift and go to state 100
    (               shift and go to state 31
    varName         shift and go to state 32
    string          shift and go to state 35
    int             shift and go to state 37
    float           shift and go to state 38
    -               shift and go to state 39
    verdadeiro      shift and go to state 40
    falso           shift and go to state 41
    nao             shift and go to state 42

    value_list                     shift and go to state 99
    value                          shift and go to state 30
    bool                           shift and go to state 33
    calc                           shift and go to state 34
    opt                            shift and go to state 36

state 71

    (43) calc -> - value .
    (38) bool -> value . e value
    (39) bool -> value . ou value
    (40) bool -> value . xou value
    (44) calc -> value . + value
    (45) calc -> value . - value
    (46) calc -> value . * value
    (47) calc -> value . / value
    (48) calc -> value . < value
    (49) calc -> value . > value
    (50) calc -> value . dif value
    (51) calc -> value . eq value
    (52) calc -> value . maieq value
    (53) calc -> value . meneq value

    +               reduce using rule 43 (calc -> - value .)
    -               reduce using rule 43 (calc -> - value .)
    *               reduce using rule 43 (calc -> - value .)
    /               reduce using rule 43 (calc -> - value .)
    ;               reduce using rule 43 (calc -> - value .)
    ,               reduce using rule 43 (calc -> - value .)
    entao           reduce using rule 43 (calc -> - value .)
    faca            reduce using rule 43 (calc -> - value .)
    )               reduce using rule 43 (calc -> - value .)
    ate             reduce using rule 43 (calc -> - value .)
    passo           reduce using rule 43 (calc -> - value .)
    e               shift and go to state 56
    ou              shift and go to state 57
    xou             shift and go to state 58
    <               shift and go to state 63
    >               shift and go to state 64
    dif             shift and go to state 65
    eq              shift and go to state 66
    maieq           shift and go to state 67
    meneq           shift and go to state 68

  ! e               [ reduce using rule 43 (calc -> - value .) ]
  ! ou              [ reduce using rule 43 (calc -> - value .) ]
  ! xou             [ reduce using rule 43 (calc -> - value .) ]
  ! <               [ reduce using rule 43 (calc -> - value .) ]
  ! >               [ reduce using rule 43 (calc -> - value .) ]
  ! dif             [ reduce using rule 43 (calc -> - value .) ]
  ! eq              [ reduce using rule 43 (calc -> - value .) ]
  ! maieq           [ reduce using rule 43 (calc -> - value .) ]
  ! meneq           [ reduce using rule 43 (calc -> - value .) ]
  ! +               [ shift and go to state 59 ]
  ! -               [ shift and go to state 60 ]
  ! *               [ shift and go to state 61 ]
  ! /               [ shift and go to state 62 ]


state 72

    (56) opt -> nao opt .

    e               reduce using rule 56 (opt -> nao opt .)
    ou              reduce using rule 56 (opt -> nao opt .)
    xou             reduce using rule 56 (opt -> nao opt .)
    +               reduce using rule 56 (opt -> nao opt .)
    -               reduce using rule 56 (opt -> nao opt .)
    *               reduce using rule 56 (opt -> nao opt .)
    /               reduce using rule 56 (opt -> nao opt .)
    <               reduce using rule 56 (opt -> nao opt .)
    >               reduce using rule 56 (opt -> nao opt .)
    dif             reduce using rule 56 (opt -> nao opt .)
    eq              reduce using rule 56 (opt -> nao opt .)
    maieq           reduce using rule 56 (opt -> nao opt .)
    meneq           reduce using rule 56 (opt -> nao opt .)
    ;               reduce using rule 56 (opt -> nao opt .)
    ,               reduce using rule 56 (opt -> nao opt .)
    entao           reduce using rule 56 (opt -> nao opt .)
    faca            reduce using rule 56 (opt -> nao opt .)
    )               reduce using rule 56 (opt -> nao opt .)
    ate             reduce using rule 56 (opt -> nao opt .)
    passo           reduce using rule 56 (opt -> nao opt .)


state 73

    (16) lines -> leia value_list ; .

    Fim             reduce using rule 16 (lines -> leia value_list ; .)
    varName         reduce using rule 16 (lines -> leia value_list ; .)
    escreva         reduce using rule 16 (lines -> leia value_list ; .)
    leia            reduce using rule 16 (lines -> leia value_list ; .)
    retorna         reduce using rule 16 (lines -> leia value_list ; .)
    se              reduce using rule 16 (lines -> leia value_list ; .)
    para            reduce using rule 16 (lines -> leia value_list ; .)
    enquanto        reduce using rule 16 (lines -> leia value_list ; .)
    inteiro         reduce using rule 16 (lines -> leia value_list ; .)
    real            reduce using rule 16 (lines -> leia value_list ; .)
    carater         reduce using rule 16 (lines -> leia value_list ; .)
    logico          reduce using rule 16 (lines -> leia value_list ; .)
    fim_se          reduce using rule 16 (lines -> leia value_list ; .)
    senao           reduce using rule 16 (lines -> leia value_list ; .)
    fim_enquanto    reduce using rule 16 (lines -> leia value_list ; .)
    fim_funcao      reduce using rule 16 (lines -> leia value_list ; .)
    fim_para        reduce using rule 16 (lines -> leia value_list ; .)


state 74

    (17) lines -> retorna value ; .

    Fim             reduce using rule 17 (lines -> retorna value ; .)
    varName         reduce using rule 17 (lines -> retorna value ; .)
    escreva         reduce using rule 17 (lines -> retorna value ; .)
    leia            reduce using rule 17 (lines -> retorna value ; .)
    retorna         reduce using rule 17 (lines -> retorna value ; .)
    se              reduce using rule 17 (lines -> retorna value ; .)
    para            reduce using rule 17 (lines -> retorna value ; .)
    enquanto        reduce using rule 17 (lines -> retorna value ; .)
    inteiro         reduce using rule 17 (lines -> retorna value ; .)
    real            reduce using rule 17 (lines -> retorna value ; .)
    carater         reduce using rule 17 (lines -> retorna value ; .)
    logico          reduce using rule 17 (lines -> retorna value ; .)
    fim_se          reduce using rule 17 (lines -> retorna value ; .)
    senao           reduce using rule 17 (lines -> retorna value ; .)
    fim_enquanto    reduce using rule 17 (lines -> retorna value ; .)
    fim_funcao      reduce using rule 17 (lines -> retorna value ; .)
    fim_para        reduce using rule 17 (lines -> retorna value ; .)


state 75

    (18) cond -> se value entao . code fim_se
    (19) cond -> se value entao . code senao code fim_se
    (3) code -> . com
    (4) code -> . code com
    (10) com -> . lines
    (11) com -> . cond
    (12) com -> . cycle
    (13) lines -> . varName assign value ;
    (14) lines -> . varType : varName_list ;
    (15) lines -> . escreva value_list ;
    (16) lines -> . leia value_list ;
    (17) lines -> . retorna value ;
    (18) cond -> . se value entao code fim_se
    (19) cond -> . se value entao code senao code fim_se
    (20) cycle -> . para varName de value ate value passo value faca code fim_para
    (21) cycle -> . enquanto value_list faca code fim_enquanto
    (28) varType -> . inteiro
    (29) varType -> . real
    (30) varType -> . carater
    (31) varType -> . logico

    varName         shift and go to state 10
    escreva         shift and go to state 12
    leia            shift and go to state 13
    retorna         shift and go to state 14
    se              shift and go to state 15
    para            shift and go to state 16
    enquanto        shift and go to state 17
    inteiro         shift and go to state 18
    real            shift and go to state 19
    carater         shift and go to state 20
    logico          shift and go to state 21

    code                           shift and go to state 101
    com                            shift and go to state 6
    lines                          shift and go to state 7
    cond                           shift and go to state 8
    cycle                          shift and go to state 9
    varType                        shift and go to state 11

state 76

    (20) cycle -> para varName de . value ate value passo value faca code fim_para
    (22) value -> . varName
    (23) value -> . bool
    (24) value -> . calc
    (25) value -> . string
    (26) value -> . varName ( value_list )
    (27) value -> . varName ( )
    (37) bool -> . opt
    (38) bool -> . value e value
    (39) bool -> . value ou value
    (40) bool -> . value xou value
    (41) calc -> . int
    (42) calc -> . float
    (43) calc -> . - value
    (44) calc -> . value + value
    (45) calc -> . value - value
    (46) calc -> . value * value
    (47) calc -> . value / value
    (48) calc -> . value < value
    (49) calc -> . value > value
    (50) calc -> . value dif value
    (51) calc -> . value eq value
    (52) calc -> . value maieq value
    (53) calc -> . value meneq value
    (54) opt -> . verdadeiro
    (55) opt -> . falso
    (56) opt -> . nao opt

    varName         shift and go to state 32
    string          shift and go to state 35
    int             shift and go to state 37
    float           shift and go to state 38
    -               shift and go to state 39
    verdadeiro      shift and go to state 40
    falso           shift and go to state 41
    nao             shift and go to state 42

    value                          shift and go to state 102
    bool                           shift and go to state 33
    calc                           shift and go to state 34
    opt                            shift and go to state 36

state 77

    (21) cycle -> enquanto value_list faca . code fim_enquanto
    (3) code -> . com
    (4) code -> . code com
    (10) com -> . lines
    (11) com -> . cond
    (12) com -> . cycle
    (13) lines -> . varName assign value ;
    (14) lines -> . varType : varName_list ;
    (15) lines -> . escreva value_list ;
    (16) lines -> . leia value_list ;
    (17) lines -> . retorna value ;
    (18) cond -> . se value entao code fim_se
    (19) cond -> . se value entao code senao code fim_se
    (20) cycle -> . para varName de value ate value passo value faca code fim_para
    (21) cycle -> . enquanto value_list faca code fim_enquanto
    (28) varType -> . inteiro
    (29) varType -> . real
    (30) varType -> . carater
    (31) varType -> . logico

    varName         shift and go to state 10
    escreva         shift and go to state 12
    leia            shift and go to state 13
    retorna         shift and go to state 14
    se              shift and go to state 15
    para            shift and go to state 16
    enquanto        shift and go to state 17
    inteiro         shift and go to state 18
    real            shift and go to state 19
    carater         shift and go to state 20
    logico          shift and go to state 21

    code                           shift and go to state 103
    com                            shift and go to state 6
    lines                          shift and go to state 7
    cond                           shift and go to state 8
    cycle                          shift and go to state 9
    varType                        shift and go to state 11

state 78

    (2) port -> fun Inicio code Fim .

    $end            reduce using rule 2 (port -> fun Inicio code Fim .)


state 79

    (5) fun -> funcao varType varName ( . vars ) : code fim_funcao
    (7) vars -> .
    (8) vars -> . varType varName
    (9) vars -> . vars , varType varName
    (28) varType -> . inteiro
    (29) varType -> . real
    (30) varType -> . carater
    (31) varType -> . logico

    )               reduce using rule 7 (vars -> .)
    ,               reduce using rule 7 (vars -> .)
    inteiro         shift and go to state 18
    real            shift and go to state 19
    carater         shift and go to state 20
    logico          shift and go to state 21

    varType                        shift and go to state 104
    vars                           shift and go to state 105

state 80

    (6) fun -> funcao void varName ( . vars ) : code fim_funcao
    (7) vars -> .
    (8) vars -> . varType varName
    (9) vars -> . vars , varType varName
    (28) varType -> . inteiro
    (29) varType -> . real
    (30) varType -> . carater
    (31) varType -> . logico

    )               reduce using rule 7 (vars -> .)
    ,               reduce using rule 7 (vars -> .)
    inteiro         shift and go to state 18
    real            shift and go to state 19
    carater         shift and go to state 20
    logico          shift and go to state 21

    vars                           shift and go to state 106
    varType                        shift and go to state 104

state 81

    (13) lines -> varName assign value ; .

    Fim             reduce using rule 13 (lines -> varName assign value ; .)
    varName         reduce using rule 13 (lines -> varName assign value ; .)
    escreva         reduce using rule 13 (lines -> varName assign value ; .)
    leia            reduce using rule 13 (lines -> varName assign value ; .)
    retorna         reduce using rule 13 (lines -> varName assign value ; .)
    se              reduce using rule 13 (lines -> varName assign value ; .)
    para            reduce using rule 13 (lines -> varName assign value ; .)
    enquanto        reduce using rule 13 (lines -> varName assign value ; .)
    inteiro         reduce using rule 13 (lines -> varName assign value ; .)
    real            reduce using rule 13 (lines -> varName assign value ; .)
    carater         reduce using rule 13 (lines -> varName assign value ; .)
    logico          reduce using rule 13 (lines -> varName assign value ; .)
    fim_se          reduce using rule 13 (lines -> varName assign value ; .)
    senao           reduce using rule 13 (lines -> varName assign value ; .)
    fim_enquanto    reduce using rule 13 (lines -> varName assign value ; .)
    fim_funcao      reduce using rule 13 (lines -> varName assign value ; .)
    fim_para        reduce using rule 13 (lines -> varName assign value ; .)


state 82

    (14) lines -> varType : varName_list ; .

    Fim             reduce using rule 14 (lines -> varType : varName_list ; .)
    varName         reduce using rule 14 (lines -> varType : varName_list ; .)
    escreva         reduce using rule 14 (lines -> varType : varName_list ; .)
    leia            reduce using rule 14 (lines -> varType : varName_list ; .)
    retorna         reduce using rule 14 (lines -> varType : varName_list ; .)
    se              reduce using rule 14 (lines -> varType : varName_list ; .)
    para            reduce using rule 14 (lines -> varType : varName_list ; .)
    enquanto        reduce using rule 14 (lines -> varType : varName_list ; .)
    inteiro         reduce using rule 14 (lines -> varType : varName_list ; .)
    real            reduce using rule 14 (lines -> varType : varName_list ; .)
    carater         reduce using rule 14 (lines -> varType : varName_list ; .)
    logico          reduce using rule 14 (lines -> varType : varName_list ; .)
    fim_se          reduce using rule 14 (lines -> varType : varName_list ; .)
    senao           reduce using rule 14 (lines -> varType : varName_list ; .)
    fim_enquanto    reduce using rule 14 (lines -> varType : varName_list ; .)
    fim_funcao      reduce using rule 14 (lines -> varType : varName_list ; .)
    fim_para        reduce using rule 14 (lines -> varType : varName_list ; .)


state 83

    (33) varName_list -> varName_list , . varName

    varName         shift and go to state 107


state 84

    (35) value_list -> value_list , value .
    (38) bool -> value . e value
    (39) bool -> value . ou value
    (40) bool -> value . xou value
    (44) calc -> value . + value
    (45) calc -> value . - value
    (46) calc -> value . * value
    (47) calc -> value . / value
    (48) calc -> value . < value
    (49) calc -> value . > value
    (50) calc -> value . dif value
    (51) calc -> value . eq value
    (52) calc -> value . maieq value
    (53) calc -> value . meneq value

    ;               reduce using rule 35 (value_list -> value_list , value .)
    ,               reduce using rule 35 (value_list -> value_list , value .)
    faca            reduce using rule 35 (value_list -> value_list , value .)
    )               reduce using rule 35 (value_list -> value_list , value .)
    e               shift and go to state 56
    ou              shift and go to state 57
    xou             shift and go to state 58
    +               shift and go to state 59
    -               shift and go to state 60
    *               shift and go to state 61
    /               shift and go to state 62
    <               shift and go to state 63
    >               shift and go to state 64
    dif             shift and go to state 65
    eq              shift and go to state 66
    maieq           shift and go to state 67
    meneq           shift and go to state 68


state 85

    (38) bool -> value e value .
    (38) bool -> value . e value
    (39) bool -> value . ou value
    (40) bool -> value . xou value
    (44) calc -> value . + value
    (45) calc -> value . - value
    (46) calc -> value . * value
    (47) calc -> value . / value
    (48) calc -> value . < value
    (49) calc -> value . > value
    (50) calc -> value . dif value
    (51) calc -> value . eq value
    (52) calc -> value . maieq value
    (53) calc -> value . meneq value

    e               reduce using rule 38 (bool -> value e value .)
    ou              reduce using rule 38 (bool -> value e value .)
    xou             reduce using rule 38 (bool -> value e value .)
    +               reduce using rule 38 (bool -> value e value .)
    -               reduce using rule 38 (bool -> value e value .)
    *               reduce using rule 38 (bool -> value e value .)
    /               reduce using rule 38 (bool -> value e value .)
    dif             reduce using rule 38 (bool -> value e value .)
    eq              reduce using rule 38 (bool -> value e value .)
    maieq           reduce using rule 38 (bool -> value e value .)
    meneq           reduce using rule 38 (bool -> value e value .)
    ;               reduce using rule 38 (bool -> value e value .)
    ,               reduce using rule 38 (bool -> value e value .)
    entao           reduce using rule 38 (bool -> value e value .)
    faca            reduce using rule 38 (bool -> value e value .)
    )               reduce using rule 38 (bool -> value e value .)
    ate             reduce using rule 38 (bool -> value e value .)
    passo           reduce using rule 38 (bool -> value e value .)
    <               shift and go to state 63
    >               shift and go to state 64

  ! <               [ reduce using rule 38 (bool -> value e value .) ]
  ! >               [ reduce using rule 38 (bool -> value e value .) ]
  ! e               [ shift and go to state 56 ]
  ! ou              [ shift and go to state 57 ]
  ! xou             [ shift and go to state 58 ]
  ! +               [ shift and go to state 59 ]
  ! -               [ shift and go to state 60 ]
  ! *               [ shift and go to state 61 ]
  ! /               [ shift and go to state 62 ]
  ! dif             [ shift and go to state 65 ]
  ! eq              [ shift and go to state 66 ]
  ! maieq           [ shift and go to state 67 ]
  ! meneq           [ shift and go to state 68 ]


state 86

    (39) bool -> value ou value .
    (38) bool -> value . e value
    (39) bool -> value . ou value
    (40) bool -> value . xou value
    (44) calc -> value . + value
    (45) calc -> value . - value
    (46) calc -> value . * value
    (47) calc -> value . / value
    (48) calc -> value . < value
    (49) calc -> value . > value
    (50) calc -> value . dif value
    (51) calc -> value . eq value
    (52) calc -> value . maieq value
    (53) calc -> value . meneq value

    ou              reduce using rule 39 (bool -> value ou value .)
    xou             reduce using rule 39 (bool -> value ou value .)
    +               reduce using rule 39 (bool -> value ou value .)
    -               reduce using rule 39 (bool -> value ou value .)
    *               reduce using rule 39 (bool -> value ou value .)
    /               reduce using rule 39 (bool -> value ou value .)
    ;               reduce using rule 39 (bool -> value ou value .)
    ,               reduce using rule 39 (bool -> value ou value .)
    entao           reduce using rule 39 (bool -> value ou value .)
    faca            reduce using rule 39 (bool -> value ou value .)
    )               reduce using rule 39 (bool -> value ou value .)
    ate             reduce using rule 39 (bool -> value ou value .)
    passo           reduce using rule 39 (bool -> value ou value .)
    e               shift and go to state 56
    <               shift and go to state 63
    >               shift and go to state 64
    dif             shift and go to state 65
    eq              shift and go to state 66
    maieq           shift and go to state 67
    meneq           shift and go to state 68

  ! e               [ reduce using rule 39 (bool -> value ou value .) ]
  ! <               [ reduce using rule 39 (bool -> value ou value .) ]
  ! >               [ reduce using rule 39 (bool -> value ou value .) ]
  ! dif             [ reduce using rule 39 (bool -> value ou value .) ]
  ! eq              [ reduce using rule 39 (bool -> value ou value .) ]
  ! maieq           [ reduce using rule 39 (bool -> value ou value .) ]
  ! meneq           [ reduce using rule 39 (bool -> value ou value .) ]
  ! ou              [ shift and go to state 57 ]
  ! xou             [ shift and go to state 58 ]
  ! +               [ shift and go to state 59 ]
  ! -               [ shift and go to state 60 ]
  ! *               [ shift and go to state 61 ]
  ! /               [ shift and go to state 62 ]


state 87

    (40) bool -> value xou value .
    (38) bool -> value . e value
    (39) bool -> value . ou value
    (40) bool -> value . xou value
    (44) calc -> value . + value
    (45) calc -> value . - value
    (46) calc -> value . * value
    (47) calc -> value . / value
    (48) calc -> value . < value
    (49) calc -> value . > value
    (50) calc -> value . dif value
    (51) calc -> value . eq value
    (52) calc -> value . maieq value
    (53) calc -> value . meneq value

    ou              reduce using rule 40 (bool -> value xou value .)
    xou             reduce using rule 40 (bool -> value xou value .)
    +               reduce using rule 40 (bool -> value xou value .)
    -               reduce using rule 40 (bool -> value xou value .)
    *               reduce using rule 40 (bool -> value xou value .)
    /               reduce using rule 40 (bool -> value xou value .)
    ;               reduce using rule 40 (bool -> value xou value .)
    ,               reduce using rule 40 (bool -> value xou value .)
    entao           reduce using rule 40 (bool -> value xou value .)
    faca            reduce using rule 40 (bool -> value xou value .)
    )               reduce using rule 40 (bool -> value xou value .)
    ate             reduce using rule 40 (bool -> value xou value .)
    passo           reduce using rule 40 (bool -> value xou value .)
    e               shift and go to state 56
    <               shift and go to state 63
    >               shift and go to state 64
    dif             shift and go to state 65
    eq              shift and go to state 66
    maieq           shift and go to state 67
    meneq           shift and go to state 68

  ! e               [ reduce using rule 40 (bool -> value xou value .) ]
  ! <               [ reduce using rule 40 (bool -> value xou value .) ]
  ! >               [ reduce using rule 40 (bool -> value xou value .) ]
  ! dif             [ reduce using rule 40 (bool -> value xou value .) ]
  ! eq              [ reduce using rule 40 (bool -> value xou value .) ]
  ! maieq           [ reduce using rule 40 (bool -> value xou value .) ]
  ! meneq           [ reduce using rule 40 (bool -> value xou value .) ]
  ! ou              [ shift and go to state 57 ]
  ! xou             [ shift and go to state 58 ]
  ! +               [ shift and go to state 59 ]
  ! -               [ shift and go to state 60 ]
  ! *               [ shift and go to state 61 ]
  ! /               [ shift and go to state 62 ]


state 88

    (44) calc -> value + value .
    (38) bool -> value . e value
    (39) bool -> value . ou value
    (40) bool -> value . xou value
    (44) calc -> value . + value
    (45) calc -> value . - value
    (46) calc -> value . * value
    (47) calc -> value . / value
    (48) calc -> value . < value
    (49) calc -> value . > value
    (50) calc -> value . dif value
    (51) calc -> value . eq value
    (52) calc -> value . maieq value
    (53) calc -> value . meneq value

    +               reduce using rule 44 (calc -> value + value .)
    -               reduce using rule 44 (calc -> value + value .)
    ;               reduce using rule 44 (calc -> value + value .)
    ,               reduce using rule 44 (calc -> value + value .)
    entao           reduce using rule 44 (calc -> value + value .)
    faca            reduce using rule 44 (calc -> value + value .)
    )               reduce using rule 44 (calc -> value + value .)
    ate             reduce using rule 44 (calc -> value + value .)
    passo           reduce using rule 44 (calc -> value + value .)
    e               shift and go to state 56
    ou              shift and go to state 57
    xou             shift and go to state 58
    *               shift and go to state 61
    /               shift and go to state 62
    <               shift and go to state 63
    >               shift and go to state 64
    dif             shift and go to state 65
    eq              shift and go to state 66
    maieq           shift and go to state 67
    meneq           shift and go to state 68

  ! e               [ reduce using rule 44 (calc -> value + value .) ]
  ! ou              [ reduce using rule 44 (calc -> value + value .) ]
  ! xou             [ reduce using rule 44 (calc -> value + value .) ]
  ! *               [ reduce using rule 44 (calc -> value + value .) ]
  ! /               [ reduce using rule 44 (calc -> value + value .) ]
  ! <               [ reduce using rule 44 (calc -> value + value .) ]
  ! >               [ reduce using rule 44 (calc -> value + value .) ]
  ! dif             [ reduce using rule 44 (calc -> value + value .) ]
  ! eq              [ reduce using rule 44 (calc -> value + value .) ]
  ! maieq           [ reduce using rule 44 (calc -> value + value .) ]
  ! meneq           [ reduce using rule 44 (calc -> value + value .) ]
  ! +               [ shift and go to state 59 ]
  ! -               [ shift and go to state 60 ]


state 89

    (45) calc -> value - value .
    (38) bool -> value . e value
    (39) bool -> value . ou value
    (40) bool -> value . xou value
    (44) calc -> value . + value
    (45) calc -> value . - value
    (46) calc -> value . * value
    (47) calc -> value . / value
    (48) calc -> value . < value
    (49) calc -> value . > value
    (50) calc -> value . dif value
    (51) calc -> value . eq value
    (52) calc -> value . maieq value
    (53) calc -> value . meneq value

    +               reduce using rule 45 (calc -> value - value .)
    -               reduce using rule 45 (calc -> value - value .)
    ;               reduce using rule 45 (calc -> value - value .)
    ,               reduce using rule 45 (calc -> value - value .)
    entao           reduce using rule 45 (calc -> value - value .)
    faca            reduce using rule 45 (calc -> value - value .)
    )               reduce using rule 45 (calc -> value - value .)
    ate             reduce using rule 45 (calc -> value - value .)
    passo           reduce using rule 45 (calc -> value - value .)
    e               shift and go to state 56
    ou              shift and go to state 57
    xou             shift and go to state 58
    *               shift and go to state 61
    /               shift and go to state 62
    <               shift and go to state 63
    >               shift and go to state 64
    dif             shift and go to state 65
    eq              shift and go to state 66
    maieq           shift and go to state 67
    meneq           shift and go to state 68

  ! e               [ reduce using rule 45 (calc -> value - value .) ]
  ! ou              [ reduce using rule 45 (calc -> value - value .) ]
  ! xou             [ reduce using rule 45 (calc -> value - value .) ]
  ! *               [ reduce using rule 45 (calc -> value - value .) ]
  ! /               [ reduce using rule 45 (calc -> value - value .) ]
  ! <               [ reduce using rule 45 (calc -> value - value .) ]
  ! >               [ reduce using rule 45 (calc -> value - value .) ]
  ! dif             [ reduce using rule 45 (calc -> value - value .) ]
  ! eq              [ reduce using rule 45 (calc -> value - value .) ]
  ! maieq           [ reduce using rule 45 (calc -> value - value .) ]
  ! meneq           [ reduce using rule 45 (calc -> value - value .) ]
  ! +               [ shift and go to state 59 ]
  ! -               [ shift and go to state 60 ]


state 90

    (46) calc -> value * value .
    (38) bool -> value . e value
    (39) bool -> value . ou value
    (40) bool -> value . xou value
    (44) calc -> value . + value
    (45) calc -> value . - value
    (46) calc -> value . * value
    (47) calc -> value . / value
    (48) calc -> value . < value
    (49) calc -> value . > value
    (50) calc -> value . dif value
    (51) calc -> value . eq value
    (52) calc -> value . maieq value
    (53) calc -> value . meneq value

    +               reduce using rule 46 (calc -> value * value .)
    -               reduce using rule 46 (calc -> value * value .)
    *               reduce using rule 46 (calc -> value * value .)
    /               reduce using rule 46 (calc -> value * value .)
    ;               reduce using rule 46 (calc -> value * value .)
    ,               reduce using rule 46 (calc -> value * value .)
    entao           reduce using rule 46 (calc -> value * value .)
    faca            reduce using rule 46 (calc -> value * value .)
    )               reduce using rule 46 (calc -> value * value .)
    ate             reduce using rule 46 (calc -> value * value .)
    passo           reduce using rule 46 (calc -> value * value .)
    e               shift and go to state 56
    ou              shift and go to state 57
    xou             shift and go to state 58
    <               shift and go to state 63
    >               shift and go to state 64
    dif             shift and go to state 65
    eq              shift and go to state 66
    maieq           shift and go to state 67
    meneq           shift and go to state 68

  ! e               [ reduce using rule 46 (calc -> value * value .) ]
  ! ou              [ reduce using rule 46 (calc -> value * value .) ]
  ! xou             [ reduce using rule 46 (calc -> value * value .) ]
  ! <               [ reduce using rule 46 (calc -> value * value .) ]
  ! >               [ reduce using rule 46 (calc -> value * value .) ]
  ! dif             [ reduce using rule 46 (calc -> value * value .) ]
  ! eq              [ reduce using rule 46 (calc -> value * value .) ]
  ! maieq           [ reduce using rule 46 (calc -> value * value .) ]
  ! meneq           [ reduce using rule 46 (calc -> value * value .) ]
  ! +               [ shift and go to state 59 ]
  ! -               [ shift and go to state 60 ]
  ! *               [ shift and go to state 61 ]
  ! /               [ shift and go to state 62 ]


state 91

    (47) calc -> value / value .
    (38) bool -> value . e value
    (39) bool -> value . ou value
    (40) bool -> value . xou value
    (44) calc -> value . + value
    (45) calc -> value . - value
    (46) calc -> value . * value
    (47) calc -> value . / value
    (48) calc -> value . < value
    (49) calc -> value . > value
    (50) calc -> value . dif value
    (51) calc -> value . eq value
    (52) calc -> value . maieq value
    (53) calc -> value . meneq value

    +               reduce using rule 47 (calc -> value / value .)
    -               reduce using rule 47 (calc -> value / value .)
    *               reduce using rule 47 (calc -> value / value .)
    /               reduce using rule 47 (calc -> value / value .)
    ;               reduce using rule 47 (calc -> value / value .)
    ,               reduce using rule 47 (calc -> value / value .)
    entao           reduce using rule 47 (calc -> value / value .)
    faca            reduce using rule 47 (calc -> value / value .)
    )               reduce using rule 47 (calc -> value / value .)
    ate             reduce using rule 47 (calc -> value / value .)
    passo           reduce using rule 47 (calc -> value / value .)
    e               shift and go to state 56
    ou              shift and go to state 57
    xou             shift and go to state 58
    <               shift and go to state 63
    >               shift and go to state 64
    dif             shift and go to state 65
    eq              shift and go to state 66
    maieq           shift and go to state 67
    meneq           shift and go to state 68

  ! e               [ reduce using rule 47 (calc -> value / value .) ]
  ! ou              [ reduce using rule 47 (calc -> value / value .) ]
  ! xou             [ reduce using rule 47 (calc -> value / value .) ]
  ! <               [ reduce using rule 47 (calc -> value / value .) ]
  ! >               [ reduce using rule 47 (calc -> value / value .) ]
  ! dif             [ reduce using rule 47 (calc -> value / value .) ]
  ! eq              [ reduce using rule 47 (calc -> value / value .) ]
  ! maieq           [ reduce using rule 47 (calc -> value / value .) ]
  ! meneq           [ reduce using rule 47 (calc -> value / value .) ]
  ! +               [ shift and go to state 59 ]
  ! -               [ shift and go to state 60 ]
  ! *               [ shift and go to state 61 ]
  ! /               [ shift and go to state 62 ]


state 92

    (48) calc -> value < value .
    (38) bool -> value . e value
    (39) bool -> value . ou value
    (40) bool -> value . xou value
    (44) calc -> value . + value
    (45) calc -> value . - value
    (46) calc -> value . * value
    (47) calc -> value . / value
    (48) calc -> value . < value
    (49) calc -> value . > value
    (50) calc -> value . dif value
    (51) calc -> value . eq value
    (52) calc -> value . maieq value
    (53) calc -> value . meneq value

    e               reduce using rule 48 (calc -> value < value .)
    ou              reduce using rule 48 (calc -> value < value .)
    xou             reduce using rule 48 (calc -> value < value .)
    +               reduce using rule 48 (calc -> value < value .)
    -               reduce using rule 48 (calc -> value < value .)
    *               reduce using rule 48 (calc -> value < value .)
    /               reduce using rule 48 (calc -> value < value .)
    <               reduce using rule 48 (calc -> value < value .)
    dif             reduce using rule 48 (calc -> value < value .)
    eq              reduce using rule 48 (calc -> value < value .)
    maieq           reduce using rule 48 (calc -> value < value .)
    meneq           reduce using rule 48 (calc -> value < value .)
    ;               reduce using rule 48 (calc -> value < value .)
    ,               reduce using rule 48 (calc -> value < value .)
    entao           reduce using rule 48 (calc -> value < value .)
    faca            reduce using rule 48 (calc -> value < value .)
    )               reduce using rule 48 (calc -> value < value .)
    ate             reduce using rule 48 (calc -> value < value .)
    passo           reduce using rule 48 (calc -> value < value .)
    >               shift and go to state 64

  ! >               [ reduce using rule 48 (calc -> value < value .) ]
  ! e               [ shift and go to state 56 ]
  ! ou              [ shift and go to state 57 ]
  ! xou             [ shift and go to state 58 ]
  ! +               [ shift and go to state 59 ]
  ! -               [ shift and go to state 60 ]
  ! *               [ shift and go to state 61 ]
  ! /               [ shift and go to state 62 ]
  ! <               [ shift and go to state 63 ]
  ! dif             [ shift and go to state 65 ]
  ! eq              [ shift and go to state 66 ]
  ! maieq           [ shift and go to state 67 ]
  ! meneq           [ shift and go to state 68 ]


state 93

    (49) calc -> value > value .
    (38) bool -> value . e value
    (39) bool -> value . ou value
    (40) bool -> value . xou value
    (44) calc -> value . + value
    (45) calc -> value . - value
    (46) calc -> value . * value
    (47) calc -> value . / value
    (48) calc -> value . < value
    (49) calc -> value . > value
    (50) calc -> value . dif value
    (51) calc -> value . eq value
    (52) calc -> value . maieq value
    (53) calc -> value . meneq value

    e               reduce using rule 49 (calc -> value > value .)
    ou              reduce using rule 49 (calc -> value > value .)
    xou             reduce using rule 49 (calc -> value > value .)
    +               reduce using rule 49 (calc -> value > value .)
    -               reduce using rule 49 (calc -> value > value .)
    *               reduce using rule 49 (calc -> value > value .)
    /               reduce using rule 49 (calc -> value > value .)
    <               reduce using rule 49 (calc -> value > value .)
    >               reduce using rule 49 (calc -> value > value .)
    dif             reduce using rule 49 (calc -> value > value .)
    eq              reduce using rule 49 (calc -> value > value .)
    maieq           reduce using rule 49 (calc -> value > value .)
    meneq           reduce using rule 49 (calc -> value > value .)
    ;               reduce using rule 49 (calc -> value > value .)
    ,               reduce using rule 49 (calc -> value > value .)
    entao           reduce using rule 49 (calc -> value > value .)
    faca            reduce using rule 49 (calc -> value > value .)
    )               reduce using rule 49 (calc -> value > value .)
    ate             reduce using rule 49 (calc -> value > value .)
    passo           reduce using rule 49 (calc -> value > value .)

  ! e               [ shift and go to state 56 ]
  ! ou              [ shift and go to state 57 ]
  ! xou             [ shift and go to state 58 ]
  ! +               [ shift and go to state 59 ]
  ! -               [ shift and go to state 60 ]
  ! *               [ shift and go to state 61 ]
  ! /               [ shift and go to state 62 ]
  ! <               [ shift and go to state 63 ]
  ! >               [ shift and go to state 64 ]
  ! dif             [ shift and go to state 65 ]
  ! eq              [ shift and go to state 66 ]
  ! maieq           [ shift and go to state 67 ]
  ! meneq           [ shift and go to state 68 ]


state 94

    (50) calc -> value dif value .
    (38) bool -> value . e value
    (39) bool -> value . ou value
    (40) bool -> value . xou value
    (44) calc -> value . + value
    (45) calc -> value . - value
    (46) calc -> value . * value
    (47) calc -> value . / value
    (48) calc -> value . < value
    (49) calc -> value . > value
    (50) calc -> value . dif value
    (51) calc -> value . eq value
    (52) calc -> value . maieq value
    (53) calc -> value . meneq value

    ou              reduce using rule 50 (calc -> value dif value .)
    xou             reduce using rule 50 (calc -> value dif value .)
    +               reduce using rule 50 (calc -> value dif value .)
    -               reduce using rule 50 (calc -> value dif value .)
    *               reduce using rule 50 (calc -> value dif value .)
    /               reduce using rule 50 (calc -> value dif value .)
    dif             reduce using rule 50 (calc -> value dif value .)
    ;               reduce using rule 50 (calc -> value dif value .)
    ,               reduce using rule 50 (calc -> value dif value .)
    entao           reduce using rule 50 (calc -> value dif value .)
    faca            reduce using rule 50 (calc -> value dif value .)
    )               reduce using rule 50 (calc -> value dif value .)
    ate             reduce using rule 50 (calc -> value dif value .)
    passo           reduce using rule 50 (calc -> value dif value .)
    e               shift and go to state 56
    <               shift and go to state 63
    >               shift and go to state 64
    eq              shift and go to state 66
    maieq           shift and go to state 67
    meneq           shift and go to state 68

  ! e               [ reduce using rule 50 (calc -> value dif value .) ]
  ! <               [ reduce using rule 50 (calc -> value dif value .) ]
  ! >               [ reduce using rule 50 (calc -> value dif value .) ]
  ! eq              [ reduce using rule 50 (calc -> value dif value .) ]
  ! maieq           [ reduce using rule 50 (calc -> value dif value .) ]
  ! meneq           [ reduce using rule 50 (calc -> value dif value .) ]
  ! ou              [ shift and go to state 57 ]
  ! xou             [ shift and go to state 58 ]
  ! +               [ shift and go to state 59 ]
  ! -               [ shift and go to state 60 ]
  ! *               [ shift and go to state 61 ]
  ! /               [ shift and go to state 62 ]
  ! dif             [ shift and go to state 65 ]


state 95

    (51) calc -> value eq value .
    (38) bool -> value . e value
    (39) bool -> value . ou value
    (40) bool -> value . xou value
    (44) calc -> value . + value
    (45) calc -> value . - value
    (46) calc -> value . * value
    (47) calc -> value . / value
    (48) calc -> value . < value
    (49) calc -> value . > value
    (50) calc -> value . dif value
    (51) calc -> value . eq value
    (52) calc -> value . maieq value
    (53) calc -> value . meneq value

    ou              reduce using rule 51 (calc -> value eq value .)
    xou             reduce using rule 51 (calc -> value eq value .)
    +               reduce using rule 51 (calc -> value eq value .)
    -               reduce using rule 51 (calc -> value eq value .)
    *               reduce using rule 51 (calc -> value eq value .)
    /               reduce using rule 51 (calc -> value eq value .)
    dif             reduce using rule 51 (calc -> value eq value .)
    eq              reduce using rule 51 (calc -> value eq value .)
    ;               reduce using rule 51 (calc -> value eq value .)
    ,               reduce using rule 51 (calc -> value eq value .)
    entao           reduce using rule 51 (calc -> value eq value .)
    faca            reduce using rule 51 (calc -> value eq value .)
    )               reduce using rule 51 (calc -> value eq value .)
    ate             reduce using rule 51 (calc -> value eq value .)
    passo           reduce using rule 51 (calc -> value eq value .)
    e               shift and go to state 56
    <               shift and go to state 63
    >               shift and go to state 64
    maieq           shift and go to state 67
    meneq           shift and go to state 68

  ! e               [ reduce using rule 51 (calc -> value eq value .) ]
  ! <               [ reduce using rule 51 (calc -> value eq value .) ]
  ! >               [ reduce using rule 51 (calc -> value eq value .) ]
  ! maieq           [ reduce using rule 51 (calc -> value eq value .) ]
  ! meneq           [ reduce using rule 51 (calc -> value eq value .) ]
  ! ou              [ shift and go to state 57 ]
  ! xou             [ shift and go to state 58 ]
  ! +               [ shift and go to state 59 ]
  ! -               [ shift and go to state 60 ]
  ! *               [ shift and go to state 61 ]
  ! /               [ shift and go to state 62 ]
  ! dif             [ shift and go to state 65 ]
  ! eq              [ shift and go to state 66 ]


state 96

    (52) calc -> value maieq value .
    (38) bool -> value . e value
    (39) bool -> value . ou value
    (40) bool -> value . xou value
    (44) calc -> value . + value
    (45) calc -> value . - value
    (46) calc -> value . * value
    (47) calc -> value . / value
    (48) calc -> value . < value
    (49) calc -> value . > value
    (50) calc -> value . dif value
    (51) calc -> value . eq value
    (52) calc -> value . maieq value
    (53) calc -> value . meneq value

    ou              reduce using rule 52 (calc -> value maieq value .)
    xou             reduce using rule 52 (calc -> value maieq value .)
    +               reduce using rule 52 (calc -> value maieq value .)
    -               reduce using rule 52 (calc -> value maieq value .)
    *               reduce using rule 52 (calc -> value maieq value .)
    /               reduce using rule 52 (calc -> value maieq value .)
    dif             reduce using rule 52 (calc -> value maieq value .)
    eq              reduce using rule 52 (calc -> value maieq value .)
    maieq           reduce using rule 52 (calc -> value maieq value .)
    ;               reduce using rule 52 (calc -> value maieq value .)
    ,               reduce using rule 52 (calc -> value maieq value .)
    entao           reduce using rule 52 (calc -> value maieq value .)
    faca            reduce using rule 52 (calc -> value maieq value .)
    )               reduce using rule 52 (calc -> value maieq value .)
    ate             reduce using rule 52 (calc -> value maieq value .)
    passo           reduce using rule 52 (calc -> value maieq value .)
    e               shift and go to state 56
    <               shift and go to state 63
    >               shift and go to state 64
    meneq           shift and go to state 68

  ! e               [ reduce using rule 52 (calc -> value maieq value .) ]
  ! <               [ reduce using rule 52 (calc -> value maieq value .) ]
  ! >               [ reduce using rule 52 (calc -> value maieq value .) ]
  ! meneq           [ reduce using rule 52 (calc -> value maieq value .) ]
  ! ou              [ shift and go to state 57 ]
  ! xou             [ shift and go to state 58 ]
  ! +               [ shift and go to state 59 ]
  ! -               [ shift and go to state 60 ]
  ! *               [ shift and go to state 61 ]
  ! /               [ shift and go to state 62 ]
  ! dif             [ shift and go to state 65 ]
  ! eq              [ shift and go to state 66 ]
  ! maieq           [ shift and go to state 67 ]


state 97

    (53) calc -> value meneq value .
    (38) bool -> value . e value
    (39) bool -> value . ou value
    (40) bool -> value . xou value
    (44) calc -> value . + value
    (45) calc -> value . - value
    (46) calc -> value . * value
    (47) calc -> value . / value
    (48) calc -> value . < value
    (49) calc -> value . > value
    (50) calc -> value . dif value
    (51) calc -> value . eq value
    (52) calc -> value . maieq value
    (53) calc -> value . meneq value

    ou              reduce using rule 53 (calc -> value meneq value .)
    xou             reduce using rule 53 (calc -> value meneq value .)
    +               reduce using rule 53 (calc -> value meneq value .)
    -               reduce using rule 53 (calc -> value meneq value .)
    *               reduce using rule 53 (calc -> value meneq value .)
    /               reduce using rule 53 (calc -> value meneq value .)
    dif             reduce using rule 53 (calc -> value meneq value .)
    eq              reduce using rule 53 (calc -> value meneq value .)
    maieq           reduce using rule 53 (calc -> value meneq value .)
    meneq           reduce using rule 53 (calc -> value meneq value .)
    ;               reduce using rule 53 (calc -> value meneq value .)
    ,               reduce using rule 53 (calc -> value meneq value .)
    entao           reduce using rule 53 (calc -> value meneq value .)
    faca            reduce using rule 53 (calc -> value meneq value .)
    )               reduce using rule 53 (calc -> value meneq value .)
    ate             reduce using rule 53 (calc -> value meneq value .)
    passo           reduce using rule 53 (calc -> value meneq value .)
    e               shift and go to state 56
    <               shift and go to state 63
    >               shift and go to state 64

  ! e               [ reduce using rule 53 (calc -> value meneq value .) ]
  ! <               [ reduce using rule 53 (calc -> value meneq value .) ]
  ! >               [ reduce using rule 53 (calc -> value meneq value .) ]
  ! ou              [ shift and go to state 57 ]
  ! xou             [ shift and go to state 58 ]
  ! +               [ shift and go to state 59 ]
  ! -               [ shift and go to state 60 ]
  ! *               [ shift and go to state 61 ]
  ! /               [ shift and go to state 62 ]
  ! dif             [ shift and go to state 65 ]
  ! eq              [ shift and go to state 66 ]
  ! maieq           [ shift and go to state 67 ]
  ! meneq           [ shift and go to state 68 ]


state 98

    (36) value_list -> ( value_list ) .

    ;               reduce using rule 36 (value_list -> ( value_list ) .)
    ,               reduce using rule 36 (value_list -> ( value_list ) .)
    faca            reduce using rule 36 (value_list -> ( value_list ) .)
    )               reduce using rule 36 (value_list -> ( value_list ) .)


state 99

    (26) value -> varName ( value_list . )
    (35) value_list -> value_list . , value

    )               shift and go to state 108
    ,               shift and go to state 55


state 100

    (27) value -> varName ( ) .

    e               reduce using rule 27 (value -> varName ( ) .)
    ou              reduce using rule 27 (value -> varName ( ) .)
    xou             reduce using rule 27 (value -> varName ( ) .)
    +               reduce using rule 27 (value -> varName ( ) .)
    -               reduce using rule 27 (value -> varName ( ) .)
    *               reduce using rule 27 (value -> varName ( ) .)
    /               reduce using rule 27 (value -> varName ( ) .)
    <               reduce using rule 27 (value -> varName ( ) .)
    >               reduce using rule 27 (value -> varName ( ) .)
    dif             reduce using rule 27 (value -> varName ( ) .)
    eq              reduce using rule 27 (value -> varName ( ) .)
    maieq           reduce using rule 27 (value -> varName ( ) .)
    meneq           reduce using rule 27 (value -> varName ( ) .)
    ;               reduce using rule 27 (value -> varName ( ) .)
    ,               reduce using rule 27 (value -> varName ( ) .)
    entao           reduce using rule 27 (value -> varName ( ) .)
    faca            reduce using rule 27 (value -> varName ( ) .)
    )               reduce using rule 27 (value -> varName ( ) .)
    ate             reduce using rule 27 (value -> varName ( ) .)
    passo           reduce using rule 27 (value -> varName ( ) .)


state 101

    (18) cond -> se value entao code . fim_se
    (19) cond -> se value entao code . senao code fim_se
    (4) code -> code . com
    (10) com -> . lines
    (11) com -> . cond
    (12) com -> . cycle
    (13) lines -> . varName assign value ;
    (14) lines -> . varType : varName_list ;
    (15) lines -> . escreva value_list ;
    (16) lines -> . leia value_list ;
    (17) lines -> . retorna value ;
    (18) cond -> . se value entao code fim_se
    (19) cond -> . se value entao code senao code fim_se
    (20) cycle -> . para varName de value ate value passo value faca code fim_para
    (21) cycle -> . enquanto value_list faca code fim_enquanto
    (28) varType -> . inteiro
    (29) varType -> . real
    (30) varType -> . carater
    (31) varType -> . logico

    fim_se          shift and go to state 109
    senao           shift and go to state 110
    varName         shift and go to state 10
    escreva         shift and go to state 12
    leia            shift and go to state 13
    retorna         shift and go to state 14
    se              shift and go to state 15
    para            shift and go to state 16
    enquanto        shift and go to state 17
    inteiro         shift and go to state 18
    real            shift and go to state 19
    carater         shift and go to state 20
    logico          shift and go to state 21

    com                            shift and go to state 26
    lines                          shift and go to state 7
    cond                           shift and go to state 8
    cycle                          shift and go to state 9
    varType                        shift and go to state 11

state 102

    (20) cycle -> para varName de value . ate value passo value faca code fim_para
    (38) bool -> value . e value
    (39) bool -> value . ou value
    (40) bool -> value . xou value
    (44) calc -> value . + value
    (45) calc -> value . - value
    (46) calc -> value . * value
    (47) calc -> value . / value
    (48) calc -> value . < value
    (49) calc -> value . > value
    (50) calc -> value . dif value
    (51) calc -> value . eq value
    (52) calc -> value . maieq value
    (53) calc -> value . meneq value

    ate             shift and go to state 111
    e               shift and go to state 56
    ou              shift and go to state 57
    xou             shift and go to state 58
    +               shift and go to state 59
    -               shift and go to state 60
    *               shift and go to state 61
    /               shift and go to state 62
    <               shift and go to state 63
    >               shift and go to state 64
    dif             shift and go to state 65
    eq              shift and go to state 66
    maieq           shift and go to state 67
    meneq           shift and go to state 68


state 103

    (21) cycle -> enquanto value_list faca code . fim_enquanto
    (4) code -> code . com
    (10) com -> . lines
    (11) com -> . cond
    (12) com -> . cycle
    (13) lines -> . varName assign value ;
    (14) lines -> . varType : varName_list ;
    (15) lines -> . escreva value_list ;
    (16) lines -> . leia value_list ;
    (17) lines -> . retorna value ;
    (18) cond -> . se value entao code fim_se
    (19) cond -> . se value entao code senao code fim_se
    (20) cycle -> . para varName de value ate value passo value faca code fim_para
    (21) cycle -> . enquanto value_list faca code fim_enquanto
    (28) varType -> . inteiro
    (29) varType -> . real
    (30) varType -> . carater
    (31) varType -> . logico

    fim_enquanto    shift and go to state 112
    varName         shift and go to state 10
    escreva         shift and go to state 12
    leia            shift and go to state 13
    retorna         shift and go to state 14
    se              shift and go to state 15
    para            shift and go to state 16
    enquanto        shift and go to state 17
    inteiro         shift and go to state 18
    real            shift and go to state 19
    carater         shift and go to state 20
    logico          shift and go to state 21

    com                            shift and go to state 26
    lines                          shift and go to state 7
    cond                           shift and go to state 8
    cycle                          shift and go to state 9
    varType                        shift and go to state 11

state 104

    (8) vars -> varType . varName

    varName         shift and go to state 113


state 105

    (5) fun -> funcao varType varName ( vars . ) : code fim_funcao
    (9) vars -> vars . , varType varName

    )               shift and go to state 114
    ,               shift and go to state 115


state 106

    (6) fun -> funcao void varName ( vars . ) : code fim_funcao
    (9) vars -> vars . , varType varName

    )               shift and go to state 116
    ,               shift and go to state 115


state 107

    (33) varName_list -> varName_list , varName .

    ;               reduce using rule 33 (varName_list -> varName_list , varName .)
    ,               reduce using rule 33 (varName_list -> varName_list , varName .)


state 108

    (26) value -> varName ( value_list ) .

    e               reduce using rule 26 (value -> varName ( value_list ) .)
    ou              reduce using rule 26 (value -> varName ( value_list ) .)
    xou             reduce using rule 26 (value -> varName ( value_list ) .)
    +               reduce using rule 26 (value -> varName ( value_list ) .)
    -               reduce using rule 26 (value -> varName ( value_list ) .)
    *               reduce using rule 26 (value -> varName ( value_list ) .)
    /               reduce using rule 26 (value -> varName ( value_list ) .)
    <               reduce using rule 26 (value -> varName ( value_list ) .)
    >               reduce using rule 26 (value -> varName ( value_list ) .)
    dif             reduce using rule 26 (value -> varName ( value_list ) .)
    eq              reduce using rule 26 (value -> varName ( value_list ) .)
    maieq           reduce using rule 26 (value -> varName ( value_list ) .)
    meneq           reduce using rule 26 (value -> varName ( value_list ) .)
    ;               reduce using rule 26 (value -> varName ( value_list ) .)
    ,               reduce using rule 26 (value -> varName ( value_list ) .)
    entao           reduce using rule 26 (value -> varName ( value_list ) .)
    faca            reduce using rule 26 (value -> varName ( value_list ) .)
    )               reduce using rule 26 (value -> varName ( value_list ) .)
    ate             reduce using rule 26 (value -> varName ( value_list ) .)
    passo           reduce using rule 26 (value -> varName ( value_list ) .)


state 109

    (18) cond -> se value entao code fim_se .

    Fim             reduce using rule 18 (cond -> se value entao code fim_se .)
    varName         reduce using rule 18 (cond -> se value entao code fim_se .)
    escreva         reduce using rule 18 (cond -> se value entao code fim_se .)
    leia            reduce using rule 18 (cond -> se value entao code fim_se .)
    retorna         reduce using rule 18 (cond -> se value entao code fim_se .)
    se              reduce using rule 18 (cond -> se value entao code fim_se .)
    para            reduce using rule 18 (cond -> se value entao code fim_se .)
    enquanto        reduce using rule 18 (cond -> se value entao code fim_se .)
    inteiro         reduce using rule 18 (cond -> se value entao code fim_se .)
    real            reduce using rule 18 (cond -> se value entao code fim_se .)
    carater         reduce using rule 18 (cond -> se value entao code fim_se .)
    logico          reduce using rule 18 (cond -> se value entao code fim_se .)
    fim_se          reduce using rule 18 (cond -> se value entao code fim_se .)
    senao           reduce using rule 18 (cond -> se value entao code fim_se .)
    fim_enquanto    reduce using rule 18 (cond -> se value entao code fim_se .)
    fim_funcao      reduce using rule 18 (cond -> se value entao code fim_se .)
    fim_para        reduce using rule 18 (cond -> se value entao code fim_se .)


state 110

    (19) cond -> se value entao code senao . code fim_se
    (3) code -> . com
    (4) code -> . code com
    (10) com -> . lines
    (11) com -> . cond
    (12) com -> . cycle
    (13) lines -> . varName assign value ;
    (14) lines -> . varType : varName_list ;
    (15) lines -> . escreva value_list ;
    (16) lines -> . leia value_list ;
    (17) lines -> . retorna value ;
    (18) cond -> . se value entao code fim_se
    (19) cond -> . se value entao code senao code fim_se
    (20) cycle -> . para varName de value ate value passo value faca code fim_para
    (21) cycle -> . enquanto value_list faca code fim_enquanto
    (28) varType -> . inteiro
    (29) varType -> . real
    (30) varType -> . carater
    (31) varType -> . logico

    varName         shift and go to state 10
    escreva         shift and go to state 12
    leia            shift and go to state 13
    retorna         shift and go to state 14
    se              shift and go to state 15
    para            shift and go to state 16
    enquanto        shift and go to state 17
    inteiro         shift and go to state 18
    real            shift and go to state 19
    carater         shift and go to state 20
    logico          shift and go to state 21

    code                           shift and go to state 117
    com                            shift and go to state 6
    lines                          shift and go to state 7
    cond                           shift and go to state 8
    cycle                          shift and go to state 9
    varType                        shift and go to state 11

state 111

    (20) cycle -> para varName de value ate . value passo value faca code fim_para
    (22) value -> . varName
    (23) value -> . bool
    (24) value -> . calc
    (25) value -> . string
    (26) value -> . varName ( value_list )
    (27) value -> . varName ( )
    (37) bool -> . opt
    (38) bool -> . value e value
    (39) bool -> . value ou value
    (40) bool -> . value xou value
    (41) calc -> . int
    (42) calc -> . float
    (43) calc -> . - value
    (44) calc -> . value + value
    (45) calc -> . value - value
    (46) calc -> . value * value
    (47) calc -> . value / value
    (48) calc -> . value < value
    (49) calc -> . value > value
    (50) calc -> . value dif value
    (51) calc -> . value eq value
    (52) calc -> . value maieq value
    (53) calc -> . value meneq value
    (54) opt -> . verdadeiro
    (55) opt -> . falso
    (56) opt -> . nao opt

    varName         shift and go to state 32
    string          shift and go to state 35
    int             shift and go to state 37
    float           shift and go to state 38
    -               shift and go to state 39
    verdadeiro      shift and go to state 40
    falso           shift and go to state 41
    nao             shift and go to state 42

    value                          shift and go to state 118
    bool                           shift and go to state 33
    calc                           shift and go to state 34
    opt                            shift and go to state 36

state 112

    (21) cycle -> enquanto value_list faca code fim_enquanto .

    Fim             reduce using rule 21 (cycle -> enquanto value_list faca code fim_enquanto .)
    varName         reduce using rule 21 (cycle -> enquanto value_list faca code fim_enquanto .)
    escreva         reduce using rule 21 (cycle -> enquanto value_list faca code fim_enquanto .)
    leia            reduce using rule 21 (cycle -> enquanto value_list faca code fim_enquanto .)
    retorna         reduce using rule 21 (cycle -> enquanto value_list faca code fim_enquanto .)
    se              reduce using rule 21 (cycle -> enquanto value_list faca code fim_enquanto .)
    para            reduce using rule 21 (cycle -> enquanto value_list faca code fim_enquanto .)
    enquanto        reduce using rule 21 (cycle -> enquanto value_list faca code fim_enquanto .)
    inteiro         reduce using rule 21 (cycle -> enquanto value_list faca code fim_enquanto .)
    real            reduce using rule 21 (cycle -> enquanto value_list faca code fim_enquanto .)
    carater         reduce using rule 21 (cycle -> enquanto value_list faca code fim_enquanto .)
    logico          reduce using rule 21 (cycle -> enquanto value_list faca code fim_enquanto .)
    fim_se          reduce using rule 21 (cycle -> enquanto value_list faca code fim_enquanto .)
    senao           reduce using rule 21 (cycle -> enquanto value_list faca code fim_enquanto .)
    fim_enquanto    reduce using rule 21 (cycle -> enquanto value_list faca code fim_enquanto .)
    fim_funcao      reduce using rule 21 (cycle -> enquanto value_list faca code fim_enquanto .)
    fim_para        reduce using rule 21 (cycle -> enquanto value_list faca code fim_enquanto .)


state 113

    (8) vars -> varType varName .

    )               reduce using rule 8 (vars -> varType varName .)
    ,               reduce using rule 8 (vars -> varType varName .)


state 114

    (5) fun -> funcao varType varName ( vars ) . : code fim_funcao

    :               shift and go to state 119


state 115

    (9) vars -> vars , . varType varName
    (28) varType -> . inteiro
    (29) varType -> . real
    (30) varType -> . carater
    (31) varType -> . logico

    inteiro         shift and go to state 18
    real            shift and go to state 19
    carater         shift and go to state 20
    logico          shift and go to state 21

    varType                        shift and go to state 120

state 116

    (6) fun -> funcao void varName ( vars ) . : code fim_funcao

    :               shift and go to state 121


state 117

    (19) cond -> se value entao code senao code . fim_se
    (4) code -> code . com
    (10) com -> . lines
    (11) com -> . cond
    (12) com -> . cycle
    (13) lines -> . varName assign value ;
    (14) lines -> . varType : varName_list ;
    (15) lines -> . escreva value_list ;
    (16) lines -> . leia value_list ;
    (17) lines -> . retorna value ;
    (18) cond -> . se value entao code fim_se
    (19) cond -> . se value entao code senao code fim_se
    (20) cycle -> . para varName de value ate value passo value faca code fim_para
    (21) cycle -> . enquanto value_list faca code fim_enquanto
    (28) varType -> . inteiro
    (29) varType -> . real
    (30) varType -> . carater
    (31) varType -> . logico

    fim_se          shift and go to state 122
    varName         shift and go to state 10
    escreva         shift and go to state 12
    leia            shift and go to state 13
    retorna         shift and go to state 14
    se              shift and go to state 15
    para            shift and go to state 16
    enquanto        shift and go to state 17
    inteiro         shift and go to state 18
    real            shift and go to state 19
    carater         shift and go to state 20
    logico          shift and go to state 21

    com                            shift and go to state 26
    lines                          shift and go to state 7
    cond                           shift and go to state 8
    cycle                          shift and go to state 9
    varType                        shift and go to state 11

state 118

    (20) cycle -> para varName de value ate value . passo value faca code fim_para
    (38) bool -> value . e value
    (39) bool -> value . ou value
    (40) bool -> value . xou value
    (44) calc -> value . + value
    (45) calc -> value . - value
    (46) calc -> value . * value
    (47) calc -> value . / value
    (48) calc -> value . < value
    (49) calc -> value . > value
    (50) calc -> value . dif value
    (51) calc -> value . eq value
    (52) calc -> value . maieq value
    (53) calc -> value . meneq value

    passo           shift and go to state 123
    e               shift and go to state 56
    ou              shift and go to state 57
    xou             shift and go to state 58
    +               shift and go to state 59
    -               shift and go to state 60
    *               shift and go to state 61
    /               shift and go to state 62
    <               shift and go to state 63
    >               shift and go to state 64
    dif             shift and go to state 65
    eq              shift and go to state 66
    maieq           shift and go to state 67
    meneq           shift and go to state 68


state 119

    (5) fun -> funcao varType varName ( vars ) : . code fim_funcao
    (3) code -> . com
    (4) code -> . code com
    (10) com -> . lines
    (11) com -> . cond
    (12) com -> . cycle
    (13) lines -> . varName assign value ;
    (14) lines -> . varType : varName_list ;
    (15) lines -> . escreva value_list ;
    (16) lines -> . leia value_list ;
    (17) lines -> . retorna value ;
    (18) cond -> . se value entao code fim_se
    (19) cond -> . se value entao code senao code fim_se
    (20) cycle -> . para varName de value ate value passo value faca code fim_para
    (21) cycle -> . enquanto value_list faca code fim_enquanto
    (28) varType -> . inteiro
    (29) varType -> . real
    (30) varType -> . carater
    (31) varType -> . logico

    varName         shift and go to state 10
    escreva         shift and go to state 12
    leia            shift and go to state 13
    retorna         shift and go to state 14
    se              shift and go to state 15
    para            shift and go to state 16
    enquanto        shift and go to state 17
    inteiro         shift and go to state 18
    real            shift and go to state 19
    carater         shift and go to state 20
    logico          shift and go to state 21

    varType                        shift and go to state 11
    code                           shift and go to state 124
    com                            shift and go to state 6
    lines                          shift and go to state 7
    cond                           shift and go to state 8
    cycle                          shift and go to state 9

state 120

    (9) vars -> vars , varType . varName

    varName         shift and go to state 125


state 121

    (6) fun -> funcao void varName ( vars ) : . code fim_funcao
    (3) code -> . com
    (4) code -> . code com
    (10) com -> . lines
    (11) com -> . cond
    (12) com -> . cycle
    (13) lines -> . varName assign value ;
    (14) lines -> . varType : varName_list ;
    (15) lines -> . escreva value_list ;
    (16) lines -> . leia value_list ;
    (17) lines -> . retorna value ;
    (18) cond -> . se value entao code fim_se
    (19) cond -> . se value entao code senao code fim_se
    (20) cycle -> . para varName de value ate value passo value faca code fim_para
    (21) cycle -> . enquanto value_list faca code fim_enquanto
    (28) varType -> . inteiro
    (29) varType -> . real
    (30) varType -> . carater
    (31) varType -> . logico

    varName         shift and go to state 10
    escreva         shift and go to state 12
    leia            shift and go to state 13
    retorna         shift and go to state 14
    se              shift and go to state 15
    para            shift and go to state 16
    enquanto        shift and go to state 17
    inteiro         shift and go to state 18
    real            shift and go to state 19
    carater         shift and go to state 20
    logico          shift and go to state 21

    code                           shift and go to state 126
    com                            shift and go to state 6
    lines                          shift and go to state 7
    cond                           shift and go to state 8
    cycle                          shift and go to state 9
    varType                        shift and go to state 11

state 122

    (19) cond -> se value entao code senao code fim_se .

    Fim             reduce using rule 19 (cond -> se value entao code senao code fim_se .)
    varName         reduce using rule 19 (cond -> se value entao code senao code fim_se .)
    escreva         reduce using rule 19 (cond -> se value entao code senao code fim_se .)
    leia            reduce using rule 19 (cond -> se value entao code senao code fim_se .)
    retorna         reduce using rule 19 (cond -> se value entao code senao code fim_se .)
    se              reduce using rule 19 (cond -> se value entao code senao code fim_se .)
    para            reduce using rule 19 (cond -> se value entao code senao code fim_se .)
    enquanto        reduce using rule 19 (cond -> se value entao code senao code fim_se .)
    inteiro         reduce using rule 19 (cond -> se value entao code senao code fim_se .)
    real            reduce using rule 19 (cond -> se value entao code senao code fim_se .)
    carater         reduce using rule 19 (cond -> se value entao code senao code fim_se .)
    logico          reduce using rule 19 (cond -> se value entao code senao code fim_se .)
    fim_se          reduce using rule 19 (cond -> se value entao code senao code fim_se .)
    senao           reduce using rule 19 (cond -> se value entao code senao code fim_se .)
    fim_enquanto    reduce using rule 19 (cond -> se value entao code senao code fim_se .)
    fim_funcao      reduce using rule 19 (cond -> se value entao code senao code fim_se .)
    fim_para        reduce using rule 19 (cond -> se value entao code senao code fim_se .)


state 123

    (20) cycle -> para varName de value ate value passo . value faca code fim_para
    (22) value -> . varName
    (23) value -> . bool
    (24) value -> . calc
    (25) value -> . string
    (26) value -> . varName ( value_list )
    (27) value -> . varName ( )
    (37) bool -> . opt
    (38) bool -> . value e value
    (39) bool -> . value ou value
    (40) bool -> . value xou value
    (41) calc -> . int
    (42) calc -> . float
    (43) calc -> . - value
    (44) calc -> . value + value
    (45) calc -> . value - value
    (46) calc -> . value * value
    (47) calc -> . value / value
    (48) calc -> . value < value
    (49) calc -> . value > value
    (50) calc -> . value dif value
    (51) calc -> . value eq value
    (52) calc -> . value maieq value
    (53) calc -> . value meneq value
    (54) opt -> . verdadeiro
    (55) opt -> . falso
    (56) opt -> . nao opt

    varName         shift and go to state 32
    string          shift and go to state 35
    int             shift and go to state 37
    float           shift and go to state 38
    -               shift and go to state 39
    verdadeiro      shift and go to state 40
    falso           shift and go to state 41
    nao             shift and go to state 42

    value                          shift and go to state 127
    bool                           shift and go to state 33
    calc                           shift and go to state 34
    opt                            shift and go to state 36

state 124

    (5) fun -> funcao varType varName ( vars ) : code . fim_funcao
    (4) code -> code . com
    (10) com -> . lines
    (11) com -> . cond
    (12) com -> . cycle
    (13) lines -> . varName assign value ;
    (14) lines -> . varType : varName_list ;
    (15) lines -> . escreva value_list ;
    (16) lines -> . leia value_list ;
    (17) lines -> . retorna value ;
    (18) cond -> . se value entao code fim_se
    (19) cond -> . se value entao code senao code fim_se
    (20) cycle -> . para varName de value ate value passo value faca code fim_para
    (21) cycle -> . enquanto value_list faca code fim_enquanto
    (28) varType -> . inteiro
    (29) varType -> . real
    (30) varType -> . carater
    (31) varType -> . logico

    fim_funcao      shift and go to state 128
    varName         shift and go to state 10
    escreva         shift and go to state 12
    leia            shift and go to state 13
    retorna         shift and go to state 14
    se              shift and go to state 15
    para            shift and go to state 16
    enquanto        shift and go to state 17
    inteiro         shift and go to state 18
    real            shift and go to state 19
    carater         shift and go to state 20
    logico          shift and go to state 21

    varType                        shift and go to state 11
    com                            shift and go to state 26
    lines                          shift and go to state 7
    cond                           shift and go to state 8
    cycle                          shift and go to state 9

state 125

    (9) vars -> vars , varType varName .

    )               reduce using rule 9 (vars -> vars , varType varName .)
    ,               reduce using rule 9 (vars -> vars , varType varName .)


state 126

    (6) fun -> funcao void varName ( vars ) : code . fim_funcao
    (4) code -> code . com
    (10) com -> . lines
    (11) com -> . cond
    (12) com -> . cycle
    (13) lines -> . varName assign value ;
    (14) lines -> . varType : varName_list ;
    (15) lines -> . escreva value_list ;
    (16) lines -> . leia value_list ;
    (17) lines -> . retorna value ;
    (18) cond -> . se value entao code fim_se
    (19) cond -> . se value entao code senao code fim_se
    (20) cycle -> . para varName de value ate value passo value faca code fim_para
    (21) cycle -> . enquanto value_list faca code fim_enquanto
    (28) varType -> . inteiro
    (29) varType -> . real
    (30) varType -> . carater
    (31) varType -> . logico

    fim_funcao      shift and go to state 129
    varName         shift and go to state 10
    escreva         shift and go to state 12
    leia            shift and go to state 13
    retorna         shift and go to state 14
    se              shift and go to state 15
    para            shift and go to state 16
    enquanto        shift and go to state 17
    inteiro         shift and go to state 18
    real            shift and go to state 19
    carater         shift and go to state 20
    logico          shift and go to state 21

    com                            shift and go to state 26
    lines                          shift and go to state 7
    cond                           shift and go to state 8
    cycle                          shift and go to state 9
    varType                        shift and go to state 11

state 127

    (20) cycle -> para varName de value ate value passo value . faca code fim_para
    (38) bool -> value . e value
    (39) bool -> value . ou value
    (40) bool -> value . xou value
    (44) calc -> value . + value
    (45) calc -> value . - value
    (46) calc -> value . * value
    (47) calc -> value . / value
    (48) calc -> value . < value
    (49) calc -> value . > value
    (50) calc -> value . dif value
    (51) calc -> value . eq value
    (52) calc -> value . maieq value
    (53) calc -> value . meneq value

    faca            shift and go to state 130
    e               shift and go to state 56
    ou              shift and go to state 57
    xou             shift and go to state 58
    +               shift and go to state 59
    -               shift and go to state 60
    *               shift and go to state 61
    /               shift and go to state 62
    <               shift and go to state 63
    >               shift and go to state 64
    dif             shift and go to state 65
    eq              shift and go to state 66
    maieq           shift and go to state 67
    meneq           shift and go to state 68


state 128

    (5) fun -> funcao varType varName ( vars ) : code fim_funcao .

    Inicio          reduce using rule 5 (fun -> funcao varType varName ( vars ) : code fim_funcao .)


state 129

    (6) fun -> funcao void varName ( vars ) : code fim_funcao .

    Inicio          reduce using rule 6 (fun -> funcao void varName ( vars ) : code fim_funcao .)


state 130

    (20) cycle -> para varName de value ate value passo value faca . code fim_para
    (3) code -> . com
    (4) code -> . code com
    (10) com -> . lines
    (11) com -> . cond
    (12) com -> . cycle
    (13) lines -> . varName assign value ;
    (14) lines -> . varType : varName_list ;
    (15) lines -> . escreva value_list ;
    (16) lines -> . leia value_list ;
    (17) lines -> . retorna value ;
    (18) cond -> . se value entao code fim_se
    (19) cond -> . se value entao code senao code fim_se
    (20) cycle -> . para varName de value ate value passo value faca code fim_para
    (21) cycle -> . enquanto value_list faca code fim_enquanto
    (28) varType -> . inteiro
    (29) varType -> . real
    (30) varType -> . carater
    (31) varType -> . logico

    varName         shift and go to state 10
    escreva         shift and go to state 12
    leia            shift and go to state 13
    retorna         shift and go to state 14
    se              shift and go to state 15
    para            shift and go to state 16
    enquanto        shift and go to state 17
    inteiro         shift and go to state 18
    real            shift and go to state 19
    carater         shift and go to state 20
    logico          shift and go to state 21

    code                           shift and go to state 131
    com                            shift and go to state 6
    lines                          shift and go to state 7
    cond                           shift and go to state 8
    cycle                          shift and go to state 9
    varType                        shift and go to state 11

state 131

    (20) cycle -> para varName de value ate value passo value faca code . fim_para
    (4) code -> code . com
    (10) com -> . lines
    (11) com -> . cond
    (12) com -> . cycle
    (13) lines -> . varName assign value ;
    (14) lines -> . varType : varName_list ;
    (15) lines -> . escreva value_list ;
    (16) lines -> . leia value_list ;
    (17) lines -> . retorna value ;
    (18) cond -> . se value entao code fim_se
    (19) cond -> . se value entao code senao code fim_se
    (20) cycle -> . para varName de value ate value passo value faca code fim_para
    (21) cycle -> . enquanto value_list faca code fim_enquanto
    (28) varType -> . inteiro
    (29) varType -> . real
    (30) varType -> . carater
    (31) varType -> . logico

    fim_para        shift and go to state 132
    varName         shift and go to state 10
    escreva         shift and go to state 12
    leia            shift and go to state 13
    retorna         shift and go to state 14
    se              shift and go to state 15
    para            shift and go to state 16
    enquanto        shift and go to state 17
    inteiro         shift and go to state 18
    real            shift and go to state 19
    carater         shift and go to state 20
    logico          shift and go to state 21

    com                            shift and go to state 26
    lines                          shift and go to state 7
    cond                           shift and go to state 8
    cycle                          shift and go to state 9
    varType                        shift and go to state 11

state 132

    (20) cycle -> para varName de value ate value passo value faca code fim_para .

    Fim             reduce using rule 20 (cycle -> para varName de value ate value passo value faca code fim_para .)
    varName         reduce using rule 20 (cycle -> para varName de value ate value passo value faca code fim_para .)
    escreva         reduce using rule 20 (cycle -> para varName de value ate value passo value faca code fim_para .)
    leia            reduce using rule 20 (cycle -> para varName de value ate value passo value faca code fim_para .)
    retorna         reduce using rule 20 (cycle -> para varName de value ate value passo value faca code fim_para .)
    se              reduce using rule 20 (cycle -> para varName de value ate value passo value faca code fim_para .)
    para            reduce using rule 20 (cycle -> para varName de value ate value passo value faca code fim_para .)
    enquanto        reduce using rule 20 (cycle -> para varName de value ate value passo value faca code fim_para .)
    inteiro         reduce using rule 20 (cycle -> para varName de value ate value passo value faca code fim_para .)
    real            reduce using rule 20 (cycle -> para varName de value ate value passo value faca code fim_para .)
    carater         reduce using rule 20 (cycle -> para varName de value ate value passo value faca code fim_para .)
    logico          reduce using rule 20 (cycle -> para varName de value ate value passo value faca code fim_para .)
    fim_se          reduce using rule 20 (cycle -> para varName de value ate value passo value faca code fim_para .)
    senao           reduce using rule 20 (cycle -> para varName de value ate value passo value faca code fim_para .)
    fim_enquanto    reduce using rule 20 (cycle -> para varName de value ate value passo value faca code fim_para .)
    fim_funcao      reduce using rule 20 (cycle -> para varName de value ate value passo value faca code fim_para .)
    fim_para        reduce using rule 20 (cycle -> para varName de value ate value passo value faca code fim_para .)

